<?php

require_once __DIR__ . '/Maintenance.php';

/**
 * Allows consolidating composer dependencies into one composer.json file
 * so extension and core dependencies can be managed together.
 *
 * Usage:
 *  php consolidateComposerDependencies.php extensions/FooBar/composer.json extensions/Baz/composer.json ...
 *
 * It will create a composer.json file at "$IP/vendor/composer.json", which you should then manually
 * run `composer install` on.
 */
class ConsolidateComposerDependencies extends Maintenance {
	public function __construct() {
		parent::__construct();
		$this->mDescription = "Combines multiple composer.json into one so a central set of dependencies can be installed";
	}

	public function execute() {
		global $IP;
		$paths = $this->mArgs;
		$paths[] = "$IP/composer.json";
		$vendor = "$IP/vendor/composer.json";
		if ( file_exists( $vendor ) ) {
			$vendorContents = FormatJson::decode( file_get_contents( $vendor ), true );
			if ( !isset( $vendorContents['extra']['consolidated'] ) ) {
				$this->error( "A non-autogenerated composer.json already exists at $vendor. Please move it somewhere else before running this script.", 1 );
			}
		}

		$deps = array();
		$skip = array();
		foreach ( $paths as $path ) {
			$contents = new ComposerJsonParser( $path );
			foreach ( $contents->getRequiredDependencies() as $name => $version ) {
				if ( isset( $deps[$name] ) && $version !== $deps[$name] ) {
					// TODO: We should use some of compser's version comparer stuff to check if
					// stuff like 2.0.* and 2.0.10 are compatible, but just fail for now.
					$this->error( "Error: multiple versions wanted for $name: $version and {$deps[$name]}. Please reconcile this manually, skipping." );
					$skip[] = $name;
				} else {
					$deps[$name] = $version;
				}
			}
		}

		$composerjson = array(
			'require' => array(),
			'extra' => array(
				'consolidated' => $paths,
			),
			'config' => array(
				'vendor-dir' => '.',
				'prepend-autoloader' => false,
				'optimize-autoloader' => true,
			),
		);
		// Build the composer.json file now
		foreach ( $deps as $name => $version ) {
			if ( !in_array( $name, $skip ) ) {
				$composerjson['require'][$name] = $version;
				$this->output( "Dependency: $name $version\n" );
			}
		}

		file_put_contents( $vendor, FormatJson::encode( $composerjson, true ) );
		$this->output( "Wrote to $vendor.\n" );
	}
}

$maintClass = 'ConsolidateComposerDependencies';
require_once RUN_MAINTENANCE_IF_MAIN;