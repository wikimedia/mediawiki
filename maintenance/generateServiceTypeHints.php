<?php

require_once __DIR__ . '/Maintenance.php';

/**
 * Maintenance script that generates type hints for services.
 *
 * @ingroup Maintenance
 */
class GenerateServiceTypeHints extends Maintenance {
	public function __construct() {
		parent::__construct();
		$this->addDescription( 'Generates type hints for services' );
	}

	public function execute() {
		global $IP;
		$types = $this->getTypes();
		$contents = $this->getInterfaceTypeHint( $types );
		// /docs is a crappy place but it prevents the autoloader picking it up
		file_put_contents( "$IP/docs/MediaWikiServices.hints.php", $contents );
	}

	/**
	 * Load the service name => service class mapping
	 * @return array
	 */
	protected function getTypes() {
		$dic = \MediaWiki\MediaWikiServices::getInstance();
		$wiringFiles = $dic->getBootstrapConfig()->get( 'ServiceWiringFiles' ) ?: [];

		$wiring = $types = [];
		foreach ( $wiringFiles as $file ) {
			$wiring += require( $file );
		}
		foreach ( $wiring as $name => $callback ) {
			$types[$name] = get_class( $callback( $dic ) );
		}
		return $types;
	}

	protected function getInterfaceTypeHint( $types ) {
		$typehints = [];
		foreach ( $types as $name => $clazz ) {
			$typehints[] = " * @method \\$clazz get$name()";
		}
		$typehints = implode( "\n", $typehints );

		return <<<PHP
<?php
namespace MediaWiki;
if ( false ) {
/**
 * This is a hint file generated by maintentance/generateServiceTypeHints.php
 * Manual changes will be lost.
$typehints
 */
class MediaWikiServices {}
}
PHP;
	}
}

$maintClass = 'GenerateServiceTypeHints';
require_once RUN_MAINTENANCE_IF_MAIN;
