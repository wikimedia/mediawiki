// vim: filetype=doxygen
/*!

\ingroup Hooks
\page hooks_mainpage Hooking in MediaWiki

hooks.txt

This document describes how event hooks work in MediaWiki; how to add hooks for
an event; and how to run hooks for an event. The source code of the document
is shipped with MediaWiki under docs/hooks.txt.

It is made of two pages:

- \subpage page_hooks_documentation
- \subpage page_hooks_list

To generate this documentation on your local machine:

\code
	php maintenance/mwdocgen.php --file docs/hooks.txt --output /tmp/hooks
\endcode

Then open the file /tmp/hooks/html/index.html

\page page_hooks_documentation Hooks overview

\section glossary Glossary

\par event:
Something that happens with the wiki. For example: a user logs in. A wiki page
is saved. A wiki page is deleted. Often there are two events associated with a
single action: one before the code is run to make the event happen, and one
after. Each event has a name, preferably in CamelCase. For example,
'UserLogin', 'ArticleSave', 'ArticleSaveComplete', 'ArticleDelete'.

\par hook:
A clump of code and data that should be run when an event happens. This can be
either a function and a chunk of data, or an object and a method.

\par hook function:
The function part of a hook.

\section rationale Rationale

Hooks allow us to decouple optionally-run code from code that is run for
everyone. It allows MediaWiki hackers, third-party developers and local
administrators to define code that will be run at certain points in the mainline
code, and to modify the data run by that mainline code. Hooks can keep mainline
code simple, and make it easier to write extensions. Hooks are a principled
alternative to local patches.

Consider, for example, two options in MediaWiki. One reverses the order of a
title before displaying the article; the other converts the title to all
uppercase letters. Currently, in MediaWiki code, we would handle this as follows
(note: not real code, here):

\code
	function showAnArticle($article) {
		global $wgReverseTitle, $wgCapitalizeTitle;

		if ($wgReverseTitle) {
			wfReverseTitle($article);
		}

		if ($wgCapitalizeTitle) {
			wfCapitalizeTitle($article);
		}

		# code to actually show the article goes here
	}
\endcode

An extension writer, or a local admin, will often add custom code to the
function -- with or without a global variable. For example, someone wanting
email notification when an article is shown may add:

\code
    function showAnArticle($article) {
        global $wgReverseTitle, $wgCapitalizeTitle, $wgNotifyArticle;

		if ($wgReverseTitle) {
			wfReverseTitle($article);
		}

		if ($wgCapitalizeTitle) {
			wfCapitalizeTitle($article);
		}

		# code to actually show the article goes here

		if ($wgNotifyArticle) {
			wfNotifyArticleShow($article));
		}
	}
\endcode

Using a hook-running strategy, we can avoid having all this option-specific
stuff in our mainline code. Using hooks, the function becomes:

\code
	function showAnArticle($article) {

		if (wfRunHooks('ArticleShow', array(&$article))) {

			# code to actually show the article goes here

			wfRunHooks('ArticleShowComplete', array(&$article));
		}
	}
\endcode

We've cleaned up the code here by removing clumps of weird, infrequently used
code and moving them off somewhere else. It's much easier for someone working
with this code to see what's _really_ going on, and make changes or fix bugs.

In addition, we can take all the code that deals with the little-used
title-reversing options (say) and put it in one place. Instead of having little
title-reversing if-blocks spread all over the codebase in showAnArticle,
deleteAnArticle, exportArticle, etc., we can concentrate it all in an extension
file:

\code
	function reverseArticleTitle($article) {
		# ...
	}

	function reverseForExport($article) {
		# ...
	}
\endcode

The setup function for the extension just has to add its hook functions to the
appropriate events:

\code
	setupTitleReversingExtension() {
		global $wgHooks;

		$wgHooks['ArticleShow'][] = 'reverseArticleTitle';
		$wgHooks['ArticleDelete'][] = 'reverseArticleTitle';
		$wgHooks['ArticleExport'][] = 'reverseForExport';
	}
\endcode

Having all this code related to the title-reversion option in one place means
that it's easier to read and understand; you don't have to do a grep-find to see
where the $wgReverseTitle variable is used, say.

If the code is well enough isolated, it can even be excluded when not used --
making for some slight savings in memory and load-up performance at runtime.
Admins who want to have all the reversed titles can add:

\code
	require_once 'extensions/ReverseTitle.php';
\endcode

...to their LocalSettings.php file; those of us who don't want or need it can
just leave it out.

The extensions don't even have to be shipped with MediaWiki; they could be
provided by a third-party developer or written by the admin him/herself.

\section writing_hooks Writing hooks

A hook is a chunk of code run at some particular event. It consists of:

* a function with some optional accompanying data, or
* an object with a method and some optional accompanying data.

Hooks are registered by adding them to the global $wgHooks array for a given
event. All the following are valid ways to define hooks:

\code
	$wgHooks['EventName'][] = 'someFunction'; # function, no data
	$wgHooks['EventName'][] = array('someFunction', $someData);
	$wgHooks['EventName'][] = array('someFunction'); # weird, but OK

	$wgHooks['EventName'][] = $object; # object only
	$wgHooks['EventName'][] = array($object, 'someMethod');
	$wgHooks['EventName'][] = array($object, 'someMethod', $someData);
	$wgHooks['EventName'][] = array($object); # weird but OK
\endcode

When an event occurs, the function (or object method) will be called with the
optional data provided as well as event-specific parameters. The above examples
would result in the following code being executed when 'EventName' happened:

\code
	# function, no data
	someFunction($param1, $param2)
	# function with data
	someFunction($someData, $param1, $param2)

	# object only
	$object->onEventName($param1, $param2)
	# object with method
	$object->someMethod($param1, $param2)
	# object with method and data
	$object->someMethod($someData, $param1, $param2)
\endcode

Note that when an object is the hook, and there's no specified method, the
default method called is 'onEventName'. For different events this would be
different: 'onArticleSave', 'onUserLogin', etc.

The extra data is useful if we want to use the same function or object for
different purposes. For example:

\code
	$wgHooks['ArticleSaveComplete'][] = array('ircNotify', 'TimStarling');
	$wgHooks['ArticleSaveComplete'][] = array('ircNotify', 'brion');
\endcode

This code would result in ircNotify being run twice when an article is saved:
once for 'TimStarling', and once for 'brion'.

Hooks can return three possible values:

  * true: the hook has operated successfully
  * "some string": an error occurred; processing should stop and the error
                   should be shown to the user
  * false: the hook has successfully done the work necessary and the calling
           function should skip

The last result would be for cases where the hook function replaces the main
functionality. For example, if you wanted to authenticate users to a custom
system (LDAP, another PHP program, whatever), you could do:

\code
	$wgHooks['UserLogin'][] = array('ldapLogin', $ldapServer);

	function ldapLogin($username, $password) {
		# log user into LDAP
		return false;
	}
\endcode

Returning false makes less sense for events where the action is complete, and
will normally be ignored.

Note that none of the examples made use of create_function() as a way to
attach a function to a hook. This is known to cause problems (notably with
Special:Version), and should be avoided when at all possible.

\section using_hooks Using hooks

A calling function or method uses the wfRunHooks() function to run the hooks
related to a particular event, like so:

\code
	class Article {
		# ...
		function protect() {
			global $wgUser;
			if (wfRunHooks('ArticleProtect', array(&$this, &$wgUser))) {
				# protect the article
				wfRunHooks('ArticleProtectComplete', array(&$this, &$wgUser));
			}
		}
	}
\endcode

wfRunHooks() returns true if the calling function should continue processing
(the hooks ran OK, or there are no hooks to run), or false if it shouldn't (an
error occurred, or one of the hooks handled the action already). Checking the
return value matters more for "before" hooks than for "complete" hooks.

Note that hook parameters are passed in an array; this is a necessary
inconvenience to make it possible to pass reference values (that can be changed)
into the hook code. Also note that earlier versions of wfRunHooks took a
variable number of arguments; the array() calling protocol came about after
MediaWiki 1.4rc1.


\page page_hooks_list Hooks list

This is a list of known events and parameters; please add to it if you're going
to add events to the MediaWiki code.

More hooks might be available but undocumented, you can execute a maintenance
script to find them:
\code
	php maintenance/findHooks.php
\endcode

\tableofcontents

\section Abort Abort*

\subsection AbortAutoAccount AbortAutoAccount
Return false to cancel automated local account creation, where normally
authentication against an external auth plugin would be creating a local
account.
\param[in] User $user The User object about to be created (read-only, incomplete).
\param[out] string &$abortMsg: Name of error message to be displayed to user.

\subsection AbortAutoblock AbortAutoblock
Return false to cancel an autoblock:
\param[in] string $autoblockip The IP going to be autoblocked.
\param[in] ????? $block: The block from which the autoblock is coming.

\subsection AbortDiffCache AbortDiffCache
Can be used to cancel the caching of a diff.
\param[out] DifferenceEngine &$diffEngine DifferenceEngine object.

\subsection AbortEmailNotification AbortEmailNotification
Can be used to cancel email notifications for an edit.
\param[in] User $editor The User who made the change.
\param[out] Title $title The Title of the page that was edited.

\subsection AbortLogin AbortLogin
Return false to cancel account login.
\param[in] User $user The User object being authenticated against
\param[in] string $password The password being submitted, not yet checked for validity
\param[out] LoginForm &$retval A LoginForm class constant to return from
authenticateUserData();
default is LoginForm::ABORTED. Note that the client may be using
a machine API rather than the HTML user interface.
\param[out] &$msg the message identifier for abort reason (new in 1.18, not available before 1.18).

\subsection AbortMove AbortMove
Allows to abort moving an article (title).
\param Title $old Old title
\param Title $nt New title
\param User $user User who is doing the move
\param string $err Error message
\param string $reason The reason for the move (added in 1.13)

\subsection AbortNewAccount AbortNewAccount
Return false to cancel explicit account creation.
\param[in] User $user The User object about to be created (read-only, incomplete)
\param[out] string &$msg HTML to display on abort

\subsection AbortChangePassword AbortChangePassword
Return false to cancel password change.
\param[in] User $user: The User object to which the password change is occuring
\param[in] string $mOldpass: The old password provided by the user
\param[in] string $newpass: The new password provided by the user
\param[out] string &$abortMsg: The message identifier for abort reason


\section Action Action*

\subsection ActionBeforeFormDisplay ActionBeforeFormDisplay
Before executing the HTMLForm object.
\param[in] string $name name of the action
\param[out] HTMLForm &$form HTMLForm object
\param[in] Article $article Article object

\subsection ActionModifyFormFields ActionModifyFormFields
Before creating an HTMLForm object for a page action;
Allows to change the fields on the form that will be generated.
\param[in] string $name name of the action
\param[out] HTMLForm &$fields HTMLForm descriptor array
\param[in] Article $article Article object

\subsection AddNewAccount AddNewAccount
After a user account is created.
\param[in] User $user the User object that was created. (Parameter added in 1.7)
\param[in] bool $byEmail true when account was created "by email" (added in 1.12)


\section After After*


\subsection AfterFinalPageOutput AfterFinalPageOutput
At the end of OutputPage::output() but before final
ob_end_flush() which will send the buffered output to the client. This allows
for last-minute modification of the output within the buffer by using
ob_get_clean().
\param[out] OutputPage &$output OutputPage object

\subsection AfterImportPage AfterImportPage
When a page import is completed.
\param[in] Title $title Title under which the revisions were imported
\param[in] Title $origTitle Title provided by the XML file
\param[in] int $revCount Number of revisions in the XML file
\param[in] int $sRevCount Number of successfully imported revisions
\param[in] array $pageInfo associative array of page information

\subsection AfterFinalPageOutput AfterFinalPageOutput
Nearly at the end of OutputPage::output() but
before OutputPage::sendCacheControl() and final ob_end_flush() which
will send the buffered output to the client. This allows for last-minute
modification of the output within the buffer by using ob_get_clean().
\param[in] OutputPage $output The OutputPage object where output() was called


\section Ajax Ajax*


\subsection AjaxAddScript AjaxAddScript
Called in output page just before the initialisation
of the javascript ajax engine. The hook is only called when ajax
is enabled ( $wgUseAjax = true; ).
\param[out] OutputPage &$output OutputPage object


\section Alternate Alternate*


\subsection AlternateEdit AlternateEdit
Before checking if a user can edit a page and before showing
the edit form ( EditPage::edit() ). This is triggered on &action=edit.
\param[in] EditPage $editPage the EditPage object

\subsection AlternateEditPreview AlternateEditPreview
Before generating the preview of the page when editing
( EditPage::getPreviewText() ).
\param[in] EditPage $editPage the EditPage object
\param[out] Content &$content the Content object for the text field from the edit page
\param[out] string &$previewHTML Text to be placed into the page for the preview
\param[out] ParserOutput &$parserOutput the ParserOutput object for the preview
return false and set $previewHTML and $parserOutput to output custom page
preview HTML.

\subsection AlternateUserMailer AlternateUserMailer
Called before mail is sent so that mail could be logged (or something else)
instead of using PEAR or PHP's mail(). Return false to skip the regular method
of sending mail.  Return a string to return a php-mail-error message containing
the error. Returning true will continue with sending email in the regular way.
\param[in] array $headers Associative array of headers for the email
\param[in] mixed $to MailAddress object or array
\param[in] string $from From address
\param[in] string $subject Subject of the email
\param[in] string $body Body of the message


\section API API*

\subsection APIAfterExecute APIAfterExecute
After calling the execute() method of an API module. Use
this to extend core API modules.
\param[out] Module &$module Module object

\subsection ApiCheckCanExecute ApiCheckCanExecute
Called during ApiMain::checkCanExecute. Use to further
authenticate and authorize API clients before executing the module. Return
false and set a message to cancel the request.
\param[in] Module $module Module object
\param[in] User $user Current user
\param[out] mixed &$message API usage message to die with, as a message key or
array as accepted by ApiBase::dieUsageMsg.

\subsection APIEditBeforeSave APIEditBeforeSave
Before saving a page with api.php?action=edit, after processing request
parameters. Return false to let the request fail, returning an error message or
an \<edit result="Failure"\> tag if $resultArr was filled.
\param[in] EditPage $editPage The EditPage object
\param[in] string $text The new text of the article (has yet to be saved)
\param[out] array &$resultArr Data in this array will be added to the API result

\subsection APIGetAllowedParams APIGetAllowedParams
Use this hook to modify a module's parameters.
\param[out] ApiBase &$module ApiBase Module object
\param[out] array &$params Array of parameters
\param[in] int $flags int zero or OR-ed flags like ApiBase::GET_VALUES_FOR_HELP

\subsection APIGetDescription APIGetDescription
Use this hook to modify a module's description.
\param[out] ApiBase &$module ApiBase Module object
\param[out] array &$desc Array of descriptions

\subsection APIGetParamDescription APIGetParamDescription
Use this hook to modify a module's parameter descriptions.
\param[out] ApiBase &$module ApiBase Module object
\param[out] array &$desc Array of parameter descriptions

\subsection APIGetResultProperties APIGetResultProperties
Use this hook to modify the properties in a module's result.
\param[out] ApiBase &$module ApiBase Module object
\param[out] array &$properties Array of properties

\subsection APIGetPossibleErrors APIGetPossibleErrors
Use this hook to modify the module's list of possible errors.
\param[in] ApiBase $module ApiBase Module object
\param[out] array &$possibleErrors Array of possible errors

\subsection APIQueryAfterExecute APIQueryAfterExecute
After calling the execute() method of an action=query submodule. Use this to
extend core API modules.
\param[out] Module &$module: Module object

\subsection APIQueryGeneratorAfterExecute APIQueryGeneratorAfterExecute
After calling the executeGenerator() method of an action=query submodule. Use
this to extend core API modules.
\param[out] Module &$module: Module object
\param[out] ApiPageSet &$resultPageSet: ApiPageSet object

\subsection APIQueryInfoTokens APIQueryInfoTokens
Use this hook to add custom tokens to prop=info.
Every token has an action, which will be used in the intoken parameter and in
the output (actiontoken="..."), and a callback function which should return the
token, or false if the user isn't allowed to obtain it. The prototype of the
callback function is func($pageid, $title), where $pageid is the page ID of the
page the token is requested for and $title is the associated Title object. In
the hook, just add your callback to the $tokenFunctions array and return true
(returning false makes no sense).
\param[out] array $tokenFunctions array(action => callback)

\subsection APIQueryRevisionsTokens APIQueryRevisionsTokens
Use this hook to add custom tokens to prop=revisions.
Every token has an action, which will be used in the rvtoken parameter and in
the output (actiontoken="..."), and a callback function which should return the
token, or false if the user isn't allowed to obtain it. The prototype of the
callback function is func($pageid, $title, $rev), where $pageid is the page ID
of the page associated to the revision the token is requested for, $title the
associated Title object and $rev the associated Revision object. In the hook,
just add your callback to the $tokenFunctions array and return true (returning
false makes no sense).
\param[out] array $tokenFunctions array(action => callback)

\subsection APIQueryRecentChangesTokens APIQueryRecentChangesTokens
Use this hook to add custom tokens to list=recentchanges.
Every token has an action, which will be used in the rctoken parameter and in
the output (actiontoken="..."), and a callback function which should return the
token, or false if the user isn't allowed to obtain it. The prototype of the
callback function is func($pageid, $title, $rc), where $pageid is the page ID
of the page associated to the revision the token is requested for, $title the
associated Title object and $rc the associated RecentChange object. In the
hook, just add your callback to the $tokenFunctions array and return true
(returning false makes no sense).
\param[out] array $tokenFunctions array(action => callback)

\subsection APIQuerySiteInfoGeneralInfo APIQuerySiteInfoGeneralInfo
Use this hook to add extra information to the sites general information.
\param[in] ApiQuerySiteInfo $module the current ApiQuerySiteInfo module
\param[out] array &$results array of results, add things here

\subsection APIQueryUsersTokens APIQueryUsersTokens
Use this hook to add custom token to list=users.
Every token has an action, which will be used in the ustoken parameter and in
the output (actiontoken="..."), and a callback function which should return the
token, or false if the user isn't allowed to obtain it. The prototype of the
callback function is func($user) where $user is the User object. In the hook,
just add your callback to the $tokenFunctions array and return true (returning
false makes no sense).
\param[out] array $tokenFunctions array(action => callback)

\subsection ApiMain::onException ApiMain::onException
Called by ApiMain::executeActionWithErrorHandling() when
an exception is thrown during API action execution.
\param[in] ApiMain $apiMain Calling ApiMain instance.
\param[in] Exception $e Exception object.

\subsection ApiRsdServiceApis ApiRsdServiceApis
Add or remove APIs from the RSD services list. Each service
should have its own entry in the $apis array and have a unique name, passed as
key for the array that represents the service data. In this data array, the
key-value-pair identified by the apiLink key is required.
\param[out] array &$apis array of services

\subsection ApiTokensGetTokenTypes ApiTokensGetTokenTypes
Use this hook to extend action=tokens with new token types.
\param[out] array &$tokenTypes supported token types in format 'type' => callback function
used to retrieve this type of tokens.


\section Article Article*


\subsection ArticleAfterFetchContent ArticleAfterFetchContent
After fetching content of an article from the database. DEPRECATED, use
ArticleAfterFetchContentObject instead.
\param[in] Article $article the article (object) being loaded from the database
\param[out] string &$content the content of the article, as a string.

\subsection ArticleAfterFetchContentObject ArticleAfterFetchContentObject
After fetching content of an article from the database.
\param[in] Article $article the article (object) being loaded from the database
\param[out] Content &$content the content of the article, as a Content object

\subsection ArticleConfirmDelete ArticleConfirmDelete
Before writing the confirmation form for article deletion.
\param[in] Article $article the article (object) being deleted
\param[in] OutputPage $output the OutputPage object
\param[out] string &$reason the reason (string) the article is being deleted

\subsection ArticleContentOnDiff ArticleContentOnDiff
Before showing the article content below a diff. Use this to change the content
in this area or how it is loaded.
\param[in] DifferenceEngine $diffEngine the DifferenceEngine
\param[in] OutputPage $output the OutputPage object

\subsection ArticleDelete ArticleDelete
Before an article is deleted.
\param[in] WikiPage $wikiPage the WikiPage (object) being deleted
\param[in] User $user the user (object) deleting the article
\param[in] string $reason the reason (string) the article is being deleted
\param[in] string $error if the deletion was prohibited, the (raw HTML) error
message to display (added in 1.13)
\param[in] Status $status Status object, modify this to throw an error. Overridden by $error
  (added in 1.20)

\subsection ArticleDeleteComplete ArticleDeleteComplete
After an article is deleted.
\param[in] WikiPage $wikiPage the WikiPage that was deleted
\param[in] User $user the user that deleted the article
\param[in] string $reason the reason the article was deleted
\param[in] mixed $id id of the article that was deleted
\param[in] Content $content the Content of the deleted page
\param[in] ManualLogEntry $logEntry the ManualLogEntry used to record the deletion

\subsection ArticleEditUpdateNewTalk ArticleEditUpdateNewTalk
Before updating user_newtalk when a user talk page was changed.
\param[out] WikiPage &$wikiPage WikiPage (object) of the user talk page
\param[in] User $recipient User (object) who's talk page was edited

\subsection ArticleEditUpdates ArticleEditUpdates
When edit updates (mainly link tracking) are made when an article has been
changed.
\param[in] WikiPage $wikiPage the WikiPage (object)
\param[in] unknown $editInfo data holder that includes the parser output ($editInfo->output) for
that page after the change
\param[in] bool $changed bool for if the page was changed

\subsection ArticleEditUpdatesDeleteFromRecentchanges ArticleEditUpdatesDeleteFromRecentchanges
Before deleting old entries from recentchanges table, return false to not
delete old entries.
\param[in] WikiPage $wikiPage: WikiPage (object) being modified

\subsection ArticleFromTitle ArticleFromTitle
When creating an article object from a title object using
Wiki::articleFromTitle().
\param[in] Title $title Title (object) used to create the article object
\param[in] Article $article Article (object) that will be returned

\subsection ArticleInsertComplete ArticleInsertComplete
After a new article is created. DEPRECATED, use PageContentInsertComplete.
\param[in] WikiPage $wikiPage: WikiPage created
\param[in] User $user: User creating the article
\param[in] string $text: New content
\param[in] string $summary: Edit summary/comment
\param[in] $isMinor: Whether or not the edit was marked as minor
\param[in] $isWatch: (No longer used)
\param[in] $section: (No longer used)
\param[in] $flags: Flags passed to WikiPage::doEditContent()
\param[in] $revision: New Revision of the article

\subsection ArticleMergeComplete ArticleMergeComplete
After merging to article using Special:Mergehistory.
\param[in] Title $targetTitle target title (object)
\param[in] Title $destTitle destination title (object)

\subsection ArticlePageDataAfter ArticlePageDataAfter
After loading data of an article from the database.
\param[in] WikiPage $wikiPage WikiPage (object) whose data were loaded
\param[in] object $row row (object) returned from the database server

\subsection ArticlePageDataBefore ArticlePageDataBefore
Before loading data of an article from the database.
\param[in] WikiPage $wikiPage WikiPage (object) that data will be loaded
\param[in] array $fields fields (array) to load from the database

\subsection ArticlePrepareTextForEdit ArticlePrepareTextForEdit
Called when preparing text to be saved.
\param[in] WikiPage $wikiPage the WikiPage being saved
\param[in] ParserOptions $popts parser options to be used for pre-save transformation

\subsection ArticleProtect ArticleProtect
Before an article is protected.
\param[in] WikiPage $wikiPage the WikiPage being protected
\param[in] User $user the user doing the protection
\param[in] bool $protect boolean whether this is a protect or an unprotect
\param[in] string $reason Reason for protect
\param[in] bool $moveonly boolean whether this is for move only or not

\subsection ArticleProtectComplete ArticleProtectComplete
After an article is protected.
\param[in] WikiPage $wikiPage the WikiPage that was protected
\param[in] User $user the user who did the protection
\param[in] bool $protect boolean whether it was a protect or an unprotect
\param[in] string $reason Reason for protect
\param[in] bool $moveonly boolean whether it was for move only or not

\subsection ArticlePurge ArticlePurge
Before executing "&action=purge".
\param[in] WikiPage $wikiPage WikiPage (object) to purge

\subsection ArticleRevisionVisibilitySet ArticleRevisionVisibilitySet
Called when changing visibility of one or more revisions of an article.
\param[out] Title &$title Title object of the article

\subsection ArticleRevisionUndeleted ArticleRevisionUndeleted
After an article revision is restored.
\param[in] Title $title the article title
\param[in] unknown $revision the revision
\param[in] unknown $oldPageID the page ID of the revision when archived (may be null)

\subsection ArticleRollbackComplete ArticleRollbackComplete
After an article rollback is completed.
\param[in] WikiPage $wikiPage the WikiPage that was edited
\param[in] User $user the user who did the rollback
\param[in] unknown $revision the revision the page was reverted back to
\param[in] unknown $current the reverted revision

\subsection ArticleSave ArticleSave
Before an article is saved. DEPRECATED, use PageContentSave instead.
\param[in] $wikiPage the WikiPage (object) being saved
\param[in] $user the user (object) saving the article
\param[in] $text the new article text
\param[in] $summary the article summary (comment)
\param[in] $isminor minor flag
\param[in] $iswatch watch flag
\param[in] $section section #

\subsection ArticleSaveComplete ArticleSaveComplete
After an article has been updated. DEPRECATED, use PageContentSaveComplete
instead.
\param[in] WikiPage $wikiPage: WikiPage modified
\param[in] User $user: User performing the modification
\param[in] string $text: New content
\param[in] string $summary: Edit summary/comment
\param[in] $isMinor: Whether or not the edit was marked as minor
\param[in] $isWatch: (No longer used)
\param[in] $section: (No longer used)
\param[in] $flags: Flags passed to WikiPage::doEditContent()
\param[in] $revision: New Revision of the article
\param[in] Status $status: Status object about to be returned by doEditContent()
\param[in] $baseRevId: the rev ID (or false) this edit was based on

\subsection ArticleUndelete ArticleUndelete
When one or more revisions of an article are restored.
\param[in] Title $title Title corresponding to the article restored
\param[in] bool $create Whether or not the restoration caused the page to be created (i.e. it
  didn't exist before).
\param[in] string $comment The comment associated with the undeletion.

\subsection ArticleUndeleteLogEntry ArticleUndeleteLogEntry
When a log entry is generated but not yet saved.
\param[in]  PageArchive $pageArchive the PageArchive object
\param[out] ManualLogEntry &$logEntry ManualLogEntry object
\param[in]  User $user User who is performing the log action

\subsection ArticleUpdateBeforeRedirect ArticleUpdateBeforeRedirect
After a page is updated (usually on save), before the user is redirected back
to the page.
\param[out] Article &$article the article
\param[out] string &$sectionanchor The section anchor link (e.g. "#overview" )
\param[out] string &$extraq Extra query parameters which can be added via hooked functions

\subsection ArticleViewFooter ArticleViewFooter
After showing the footer section of an ordinary page view.
\param[in] Article $article Article object
\param[in] bool $patrolFooterShown boolean whether patrol footer is shown

\subsection ArticleViewHeader ArticleViewHeader
Before the parser cache is about to be tried for article viewing.
\param[out] Article &$article the article
\param[out] bool &$pcache whether to try the parser cache or not
\param[out] mixed &$outputDone whether the output for this page finished or not.
Set to a ParserOutput object to both indicate that the output is done and what
parser output was used.

\subsection ArticleViewRedirect ArticleViewRedirect
Before setting "Redirected from ..." subtitle when a redirect was followed.
\param[in] Article $article target article (object)

\subsection ArticleViewCustom ArticleViewCustom
Allows to output the text of the article in a different format than wikitext.
DEPRECATED, use ArticleContentViewCustom instead. Note that it is preferable to
implement proper handing for a custom data type using the ContentHandler facility.
\param[in] string $text text of the page
\param[in] Title $title title of the page
\param[in] $output reference to $wgOut

\subsection ArticleContentViewCustom ArticleContentViewCustom
Allows to output the text of the article in a different format than wikitext.
Note that it is preferable to implement proper handing for a custom data type
using the ContentHandler facility.
\param[in] Content $content content of the page, as a Content object
\param[in] Title $title title of the page
\param[in] $output reference to $wgOut


\section Auth Auth*


\subsection AuthPluginAutoCreate AuthPluginAutoCreate
Called when creating a local account for an user logged in from an external
authentication method.
\param[in] User $user User object created locally

\subsection AuthPluginSetup AuthPluginSetup
Update or replace authentication plugin object ($wgAuth).
Gives a chance for an extension to set it programmatically to a variable class.
\param[out] &$auth: the $wgAuth object, probably a stub

\section A A*

\subsection AutopromoteCondition AutopromoteCondition
Check autopromote condition for user.
\param[in] $type condition type
\param[in] $args arguments
\param[in] $user user
\param[in] $result result of checking autopromote condition

\section B B*

\subsection BacklinkCacheGetPrefix BacklinkCacheGetPrefix
Allows to set prefix for a specific link table.
\param[in] $table table name
\param[out] &$prefix prefix

\subsection BacklinkCacheGetConditions BacklinkCacheGetConditions
Allows to set conditions for query when links to certain title are fetched.
\param[in] $table table name
\param[in] $title title of the page to which backlinks are sought
\param[out] &$conds query conditions

\subsection BadImage BadImage
When checking against the bad image list. Change $bad and return false to
override. If an image is "bad", it is not rendered inline in wiki pages or
galleries in category pages.
\param[in] $name Image name being checked
\param[out] bool &$bad Whether or not the image is "bad"

\subsection BeforeDisplayNoArticleText BeforeDisplayNoArticleText
Before displaying message key "noarticletext" or
"noarticletext-nopermission" at Article::showMissingArticle().
\param[in] Article $article article object


\section Before Before*


\subsection BeforeInitialize BeforeInitialize
Before anything is initialized in
MediaWiki::performRequest().
\param[out] Title &$title: Title being used for request
\param[in]  $unused: null
\param[out] OutputPage &$output: OutputPage object
\param[out] User &$user User
\param[in]  WebRequest $request WebRequest object
\param[in]  MediaWiki $mediaWiki Mediawiki object

\subsection BeforePageDisplay BeforePageDisplay
Prior to outputting a page.
\param[out] OutputPage &$out OutputPage object
\param[out] Skin &$skin Skin object

\subsection BeforePageRedirect BeforePageRedirect
Prior to sending an HTTP redirect. Gives a chance to override how the redirect
is output by modifying, or by returning false and taking over the output.
\param[in] OutputPage $out OutputPage object
\param[out] string &$redirect URL, modifiable
\param[out] int &$code HTTP code (eg '301' or '302'), modifiable

\subsection BeforeParserFetchFileAndTitle BeforeParserFetchFileAndTitle
Before an image is rendered by Parser.
\param[in] Parser $parser Parser object
\param[in] Title $nt the image title
\param[out] array &$options array of options to RepoGroup::findFile
\param[out] string &$descQuery query string to add to thumbnail URL

FIXME: Where does the below sentence fit in?
If 'broken' is a key in $options then the file will appear as a broken thumbnail.

\subsection BeforeParserFetchTemplateAndtitle BeforeParserFetchTemplateAndtitle
Before a template is fetched by Parser.
\param[in] Parser $parser Parser object
\param[in] Title $title title of the template
\param[out] bool &$skip: skip this template and link it?
\param[out] int &$id the id of the revision being parsed

\subsection BeforeParserrenderImageGallery BeforeParserrenderImageGallery
Before an image gallery is rendered by Parser.
\param[out] Parser &$parser Parser object
\param[out] ImageGallery &$ig ImageGallery object

\subsection BeforeWelcomeCreation BeforeWelcomeCreation
Before the welcomecreation message is displayed to a newly created user.
\param[out] string &$welcome_creation_msg MediaWiki message name to display on
the welcome screen to a newly created user account.
\param[out] string &$injected_html Any HTML to inject after the "logged in" message of a newly created user account

\subsection BitmapHandlerTransform BitmapHandlerTransform
Before a file is transformed, gives extension the possibility to transform it themselves.
\param[in] BitmapHandler $handler BitmapHandler
\param[in] File $image File
\param[out] array &$scalerParams Array with scaler parameters
\param[out] &$mto null, set to a MediaTransformOutput

\subsection BitmapHandlerCheckImageArea BitmapHandlerCheckImageArea
By BitmapHandler::normaliseParams, after all normalizations have been
performed, except for the $wgMaxImageArea check.
\param[in] File $image File
\param[out] array &$params Array of parameters
\param[out] &$checkImageAreaHookResult null, set to true or false to override
the $wgMaxImageArea check result.

\subsection PerformRetroactiveAutoblock PerformRetroactiveAutoblock
Called before a retroactive autoblock is applied to a user.
\param[in] Block $block Block object (which is set to be autoblocking)
\param[out] array &$blockIds Array of block IDs of the autoblock

\subsection BlockIp BlockIp
Before an IP address or user is blocked.
\param[out] Block $block the Block object about to be saved
\param[out] User $performer the user _doing_ the block (not the one being blocked)

\subsection BlockIpComplete BlockIpComplete
After an IP address or user is blocked.
\param[in] Block $block the Block object that was saved
\param[in] User $performer the user who did the block (not the one being
blocked)

\subsection BookInformation BookInformation
Before information output on Special:Booksources.
\param[in] string $isbn ISBN to show information for
\param[in] OutputPage $output OutputPage object in use

\subsection CanonicalNamespaces CanonicalNamespaces
For extensions adding their own namespaces or altering the defaults.
\param[out] array &$namespaces Array of namespace numbers with corresponding
canonical names


\section Category Category*


\subsection CategoryAfterPageAdded CategoryAfterPageAdded
After a page is added to a category.
\param[in] Category $category Category that page was added to
\param[in] WikiPage $wikiPage WikiPage that was added

\subsection CategoryAfterPageRemoved CategoryAfterPageRemoved
After a page is removed from a category.
\param[in] Category $category Category that page was removed from
\param[in] WikiPage $wikiPage WikiPage that was removed

\subsection CategoryPageView CategoryPageView
Before viewing a categorypage in CategoryPage::view.
\param[in] CategoryPage $catpage CategoryPage instance

\subsection ChangePasswordForm ChangePasswordForm
For extensions that need to add a field to the ChangePassword form via the
Preferences form.
\param[out] array &$extraFields: An array of arrays that hold fields like would
be passed to the pretty function.

\subsection ChangesListInsertArticleLink ChangesListInsertArticleLink
Override or augment link to article in RC list.
\param[out] ChangesList &$changesList ChangesList instance.
\param[out] string &$articlelink HTML of link to article (already filled-in).
\param[out] string &$s HTML of row that is being constructed.
\param[out] RecentChange &$rc RecentChange instance.
\param[in] bool $unpatrolled Whether or not we are showing unpatrolled changes.
\param[in] bool $watched Whether or not the change is watched by the user.

\subsection Collation::factory Collation::factory
Called if $wgCategoryCollation is an unknown collation.
\param[in] string $collationName Name of the collation in question
\param[out] &$collationObject Null. Replace with a subclass of the Collation
class that implements the collation given in $collationName.

\subsection ConfirmEmailComplete ConfirmEmailComplete
Called after a user's email has been confirmed successfully.
\param[in] User $user user (object) whose email is being confirmed

\subsection ContentHandlerDefaultModelFor ContentHandlerDefaultModelFor
Called when the default content model is determined for a given title. May be
used to assign a different model for that title.
\param[in] Title $title: the Title in question
\param[out] &$model: the model name. Use with CONTENT_MODEL_XXX constants.

\subsection ContentHandlerForModelID ContentHandlerForModelID
Called when a ContentHandler is requested for a given content model name, but
no entry for that model exists in $wgContentHandlers.
\param[in] string $modeName the requested content model name
\param[out] &$handler set this to a ContentHandler object, if desired.

\subsection ConvertContent ConvertContent
Called by AbstractContent::convert when a conversion to another content model
is requested.
\param[in] Content $content The Content object to be converted.
\param[in] $toModel The ID of the content model to convert to.
\param[in] bool $lossy boolean indicating whether lossy conversion is allowed.
\param[out] &$result Output parameter, in case the handler function wants to
provide a converted Content object. Note that $result->getContentModel() must
return $toModel.  Handler functions that modify $result should generally return
false to further attempts at conversion.

\subsection ContribsPager::getQueryInfo ContribsPager::getQueryInfo
Before the contributions query is about to run
\param[out] Parser &$pager Pager object for contributions
\param[out] &$queryInfo The query for the contribs Pager

\subsection ContribsPager::reallyDoQuery ContribsPager::reallyDoQuery
Called before really executing the query for My Contributions
\param[out] array &$data: an array of results of all contribs queries
\param[in]  ContribsPager $pager: The ContribsPager object hooked into
\param[in]  int $offset: Index offset, inclusive
\param[in]  int $limit: Exact query limit
\param[in]  bool $descending: Query direction, false for ascending, true for
descending

\subsection ContributionsLineEnding ContributionsLineEnding
Called before a contributions HTML line is finished
\param[in]  SpecialPage $page SpecialPage object for contributions
\param[out] string &$ret: the HTML line
\param[in]  $row: the DB row for this line
\param[out] &$classes: the classes to add to the surrounding \<li\>

\subsection ContributionsToolLinks ContributionsToolLinks
Change tool links above Special:Contributions
\param[in]  int $id User identifier
\param[in]  Title $title User page title
\param[out] array &$tools Array of tool links

\subsection CustomEditor CustomEditor
When invoking the page editor
\param[in] Article $article Article being edited
\param[in] User $performer User performing the edit
Return true to allow the normal editor to be used, or false if implementing a
custom editor, e.g. for a special namespace, etc.

\subsection DatabaseOraclePostInit DatabaseOraclePostInit
Called after initialising an Oracle database
\param[out] DatabaseOracle &$db the DatabaseOracle object

\subsection Debug Debug
Called when outputting a debug log line via wfDebug() or wfDebugLog()
\param[in] string $text plaintext string to be output
\param[in] $group null or a string naming a logging group (as defined in
$wgDebugLogGroups)

\subsection NewDifferenceEngine NewDifferenceEngine
Called when a new DifferenceEngine object is made
\param[in]  Title $title the diff page title (nullable)
\param[out] int &$oldId the actual old Id to use in the diff
\param[out] int &$newId the actual new Id to use in the diff (0 means current)
\param[in] $old the ?old= param value from the url
\param[in] $new the ?new= param value from the url

\subsection DiffRevisionTools DiffRevisionTools
Override or extend the revision tools available from the diff view, i.e. undo,
etc.
\param[in] Revision $rev Revision object
\param[out] array &$links: Array of HTML links

\subsection DiffViewHeader DiffViewHeader
Called before diff display
\param[in] DifferenceEngine $diff DifferenceEngine object that is calling
\param[in] Revision $oldRev Revision object of the "old" revision (may be
null/invalid)
\param[in] Revision $newRev Revision object of the "new" revision

\subsection DisplayOldSubtitle DisplayOldSubtitle
Before creating subtitle when browsing old versions of an article
\param[in] Article $article article (object) being viewed
\param[in] int $oldid oldid (int) being viewed

\subsection DoEditSectionLink DoEditSectionLink
Override the HTML generated for section edit links
\param[in] Skin $skin Skin object rendering the UI
\param[in] Title $title Title object for the title being linked to (may not be
the same as $wgTitle, if the section is included from a template)
\param[in] string $section The designation of the section being pointed to, to
be included in the link, like "&section=$section"
\param[in] string $tooltip The default tooltip.  Escape before using.  By
default, this is wrapped in the 'editsectionhint' message.
\param[out] string &$result The HTML to return, prefilled with the default plus
whatever other changes earlier hooks have made
\param[in] string $lang The language code to use for the link in the wfMessage
function


\section Edit Edit*


\subsection EditFilter EditFilter
Perform checks on an edit
\param[in]  EditPage $editor EditPage instance (object). The edit form (see
includes/EditPage.php)
\param[in]  string $text Contents of the edit box
\param[in]  int $section Section being edited
\param[out] string &$error Error message to return
\param[in]  string $summary Edit summary for page

\subsection EditFilterMerged EditFilterMerged
Post-section-merge edit filter.
DEPRECATED, use EditFilterMergedContent instead.
\param[in]  EditPage $editor EditPage instance (object)
\param[in]  string $text content of the edit box
\param[out] string &$error error message to return
\param[in]  string $summary Edit summary for page

\subsection EditFilterMergedContent EditFilterMergedContent
Post-section-merge edit filter.
This may be triggered by the EditPage or any other facility that modifies page
content.  Use the $status object to indicate whether the edit should be
allowed, and to provide a reason for disallowing it. Return false to abort the
edit, and true to continue.
Returning true if $status->isOK() returns false means "don't save but continue
user interaction", e.g. show the edit form.
\param[in] IContextSource $context object implementing the IContextSource
interface.
\param[in] Content $content content of the edit box, as a Content object.
\param[in] Status $status Status object to represent errors, etc.
\param[in] string $summary Edit summary for page
\param[in] User $user the User object representing the user whois performing
the edit.
\param[in] bool $minoredit: whether the edit was marked as minor by the user.

\subsection EditFormPreloadText EditFormPreloadText
Allows population of the edit form when creating new pages
\param[out] string &$text Text to preload with
\param[out] Title &$title Title object representing the page being created

\subsection EditFormInitialText EditFormInitialText
Allows modifying the edit form when editing existing pages
\param[in] EditPage $editPage EditPage object

\subsection EditPage::attemptSave EditPage::attemptSave
Called before an article is saved, that is before WikiPage::doEditContent() is
called
\param[in] EditPage $editpage_Obj: the current EditPage object

\subsection EditPage::importFormData EditPage::importFormData
Allow extensions to read additional data posted in the form
\param[in] EditPage $editpage EditPage instance
\param[in] WebRequest $request Webrequest return value is ignored (should
always return true)

\subsection EditPage::showEditForm:fields EditPage::showEditForm:fields
Allows injection of form field into edit form
\param[in] EditPage $editor the EditPage instance for reference
\param[in] OutputPage $out an OutputPage instance to write to return value is
ignored (should always return true)

\subsection EditPage::showEditForm:initial EditPage::showEditForm:initial
Before showing the edit form
\param[in] EditPage $editor EditPage instance (object)
\param[in] OutputPage $out an OutputPage instance to write to
Return false to halt editing; you will need to handle error messages, etc.
yourself. Alternatively, modifying $error and returning true will cause the
contents of $error to be echoed at the top of the edit form as wikitext.
Return true without altering $error to allow the edit to proceed.

\subsection EditPage::showStandardInputs:options EditPage::showStandardInputs:options
Allows injection of form fields into the editOptions area
\param[in] EditPage $editor EditPage instance (object)
\param[in] OutputPage $out an OutputPage instance to write to
\param[out] &$tabindex HTML tabindex of the last edit check/button return value
is ignored (should always be true)

\subsection EditPageBeforeConflictDiff EditPageBeforeConflictDiff
Allows modifying the EditPage object and output when there is an edit conflict.
Return false to halt normal diff output; in this case you are responsible for
computing and outputting the entire "conflict" part, i.e., the "difference
between revisions" and "your text" headers and sections.
\param[out] EditPage &$editor EditPage instance
\param[out] OutputPage &$out OutputPage instance

\subsection EditPageBeforeEditButtons EditPageBeforeEditButtons
Allows modifying the edit buttons below the textarea in the edit form.
\param[out] EditPage &$editpage The current EditPage object
\param[out] array &$buttons Array of edit buttons "Save", "Preview", "Live",
and "Diff"
\param[out] &$tabindex HTML tabindex of the last edit check/button

\subsection EditPageBeforeEditChecks EditPageBeforeEditChecks
Allows modifying the edit checks below the textarea in the edit form.
\param[out] EditPage &$editpage The current EditPage object
\param[out] array &$checks Array of edit checks like "watch this page"/"minor
edit"
\param[out] &$tabindex HTML tabindex of the last edit check/button

\subsection EditPageBeforeEditToolbar EditPageBeforeEditToolbar
Allows modifying the edit toolbar above the textarea in the edit form.
\param[out] string &$toolbar: The toolbar HTMl

\subsection EditPageCopyrightWarning EditPageCopyrightWarning
Allow for site and per-namespace customization of contribution/copyright
notice.
\param[in]  Title $title title of page being edited
\param[out] string &$msg localization message name, overridable. Default is
either 'copyrightwarning' or 'copyrightwarning2'.

\subsection EditPageGetDiffText EditPageGetDiffText
DEPRECATED. Use EditPageGetDiffContent instead.
Allow modifying the wikitext that will be used in "Show changes". Note that it
is preferable to implement diff handling for different data types using the
ContentHandler facility.
\param[in] EditPage $editPage EditPage object
\param[out] string &$newtext wikitext that will be used as "your version"

\subsection EditPageGetDiffContent EditPageGetDiffContent
Allow modifying the wikitext that will be used in "Show changes". Note that it
is preferable to implement diff handling for different data types using the
ContentHandler facility.
\param[in]  EditPage $editPage EditPage object
\param[out] string &$newtext wikitext that will be used as "your version"

\subsection EditPageGetPreviewText EditPageGetPreviewText
DEPRECATED. Use EditPageGetPreviewContent instead.
Allow modifying the wikitext that will be previewed. Note that it is preferable
to implement previews for different data types using the ContentHandler
facility.
\param[in]  EditPage $editPage EditPage object
\param[out] string &$toparse wikitext that will be parsed

\subsection EditPageGetPreviewContent EditPageGetPreviewContent
Allow modifying the wikitext that will be previewed. Note that it is preferable
to implement previews for different data types using the ContentHandler
facility.
\param[in]  EditPage $editPage EditPage object
\param[out] Content &$content Content object to be previewed (may be replaced
by hook function)

\subsection EditPageNoSuchSection EditPageNoSuchSection
When a section edit request is given for an non-existent section
\param[out] EditPage &$editpage The current EditPage object
\param[out] string &$res the HTML of the error text

\subsection EditPageTosSummary EditPageTosSummary
Give a chance for site and per-namespace customizations of terms of service
summary link that might exist separately from the copyright notice.
\param[in]  Title $title title of page being edited
\param[out] string &$msg localization message name, overridable. Default is
'editpage-tos-summary'

\subsection EditSectionLink EditSectionLink
Do not use, use DoEditSectionLink instead.
\param[in]  $skin: Skin rendering the UI
\param[in]  $title: Title being linked to
\param[in]  $section: Section to link to
\param[in]  $link: Default link
\param[out] &$result: Result (alter this to override the generated links)
\param[in]  $lang: The language code to use for the link in the wfMessage function


\section Email Email*

\subsection EmailConfirmed EmailConfirmed
When checking that the user's email address is "confirmed".
\param[in] User $user User being checked
\param[in] bool $confirmed Whether or not the email address is confirmed
This runs before the other checks, such as anonymity and the real check; return
true to allow those checks to occur, and false if checking is done.

\subsection EmailUser EmailUser
Before sending email from one user to another.
\param[out] string &$to: address of receiving user
\param[out] string &$from: address of sending user
\param[out] string &$subject subject of the mail
\param[out] string &$text text of the mail
\param[out] string &$error Message to be displayed on error.

\subsection EmailUserCC EmailUserCC
Before sending the copy of the email to the author.
\param[out] string &$to: address of receiving user
\param[out] string &$from: address of sending user
\param[out] string &$subject: subject of the mail
\param[out] string &$text: text of the mail

\subsection EmailUserComplete EmailUserComplete
After sending email from one user to another.
\param[in] string $to address of receiving user
\param[in] string $from address of sending user
\param[in] string $subject subject of the mail
\param[in] string $text text of the mail

\subsection EmailUserForm EmailUserForm
After building the email user form object.
\param[out] &$form: HTMLForm object

\subsection EmailUserPermissionsErrors EmailUserPermissionsErrors
To retrieve permissions errors for emailing a user.
\param[in] User $user The user who is trying to email another user.
\param[in] $editToken The user's edit token.
\param[out] &$hookErr Out-param for the error. Passed as the parameters to
  OutputPage::showErrorPage.

\subsection ExemptFromAccountCreationThrottle ExemptFromAccountCreationThrottle
Exemption from the account creation throttle.
\param[in] string $ip The ip address of the user

\subsection ExtensionTypes ExtensionTypes
Called when generating the extensions credits, use this to change the tables
headers.
\param[out] array &$extTypes associative array of extensions types

\subsection ExtractThumbParameters ExtractThumbParameters
Called when extracting thumbnail parameters from a thumbnail file name.
\param[in]  string $thumbname the base name of the thumbnail file
\param[out] &$params: the currently extracted params (has source name, temp or
archived zone)

\subsection FetchChangesList FetchChangesList
When fetching the ChangesList derivative for a particular user.
\param[in]  User $user User the list is being fetched for
\param[out] Skin &$skin Skin object to be used with the list
\param[out] &$list List object (defaults to NULL, change it to an object
instance and return false override the list derivative used)


\section File File*


\subsection FileDeleteComplete FileDeleteComplete
When a file is deleted.
\param[out] $file reference to the deleted file
\param[out] string $oldimage in case of the deletion of an old image, the name
of the old file
\param[out] $article in case all revisions of the file are deleted a reference
to the WikiFilePage associated with the file.
\param[out] User $performer user who performed the deletion
\param[out] string $reason reason

\subsection FileTransformed FileTransformed
When a file is transformed and moved into storage.
\param[in] File $file reference to the File object
\param[in] MediaTransformOutput $thumb the MediaTransformOutput object
\param[in] string $tmpThumbPath The temporary file system path of the transformed file
\param[in] string $thumbPath The permanent storage path of the transformed file

\subsection FileUpload FileUpload
When a file upload occurs.
\param[in] $file Image object representing the file that was uploaded
\param[in] bool $reupload Boolean indicating if there was a previously another
image there or not (since 1.17)
\param[in] bool $hasDescription Boolean indicating that there was already a
description page and a new one from the comment was not created (since 1.17)

\subsection FileUndeleteComplete FileUndeleteComplete
When a file is undeleted
\param[in] Title $title title object to the file
\param[in] array $fileVersions: array of undeleted versions. Empty if all
versions were restored
\param[in] User $user: user who performed the undeletion
\param[in] string $reason reason

\subsection FormatAutocomments FormatAutocomments
When an autocomment is formatted by the Linker.
\param[out] &$comment Reference to the accumulated comment. Initially null,
when set the default code will be skipped.
\param[in] $pre Initial part of the parsed comment before the call to the hook.
\param[in] $auto The extracted part of the parsed comment before the call to the hook.
\param[in] $post The final part of the parsed comment before the call to the hook.
\param[in] $title An optional title object used to links to sections. Can be null.
\param[in] $local Boolean indicating whether section links should refer to local page.

\subsection GetAutoPromoteGroups GetAutoPromoteGroups
When determining which autopromote groups a user is entitled to be in.
\param[out] User &$user user to promote.
\param[out] &$promote groups that will be added.

\subsection GetBlockedStatus GetBlockedStatus
After loading blocking status of an user from the database
\param[in] User $user user (object) being checked

\subsection GetCacheVaryCookies GetCacheVaryCookies
Get cookies that should vary cache options.
\param[in]  OutputPage $out OutputPage object
\param[out] array &$cookies array of cookies name, add a value to it if you
want to add a cookie that have to vary cache options

\subsection GetCanonicalURL GetCanonicalURL
Modify fully-qualified URLs used for IRC and e-mail notifications.
\param[in] Title $title Title object of page
\param[out] string $url string value as output
\param[in] $query query options passed to Title::getCanonicalURL()

\subsection GetDefaultSortkey GetDefaultSortkey
Override the default sortkey for a page.
\param[in]  Title $title Title object that we need to get a sortkey for
\param[out] &$sortkey Sortkey to use.

\subsection GetDoubleUnderscoreIDs GetDoubleUnderscoreIDs
Modify the list of behavior switch (double underscore) magic words. Called by
MagicWord.
\param[out] arry &$doubleUnderscoreIDs array of strings

\subsection GetFullURL GetFullURL
Modify fully-qualified URLs used in redirects/export/offsite data.
\param[out] Title $title Title object of page
\param[out] string $url string value as output
\param[in]  $query query options passed to Title::getFullURL()

\subsection GetHumanTimestamp GetHumanTimestamp
Pre-emptively override the human-readable timestamp generated by
MWTimestamp::getHumanTimestamp(). Return false in this hook to use the custom
output.
\param[out] string &$output string for the output timestamp
\param[in]  MWTimestamp $timestamp MWTimestamp object of the current
(user-adjusted) timestamp
\param[in]  MWTimestamp $relativeTo MWTimestamp object of the relative
(user-adjusted) timestamp
\param[in]  User $user User whose preferences are being used to make timestamp
\param[in]  Language $lang Language that will be used to render the timestamp

\subsection GetInternalURL GetInternalURL
Modify fully-qualified URLs used for squid cache purging.
\param[out] Title $title Title object of page
\param[out] string $url string value as output (out parameter, can modify)
\param[in]  $query query options passed to Title::getInternalURL()

\subsection GetIP GetIP
Modify the ip of the current user (called only once).
\param[out] string &$ip The user IP as determined so far

\subsection GetLinkColours GetLinkColours
Modify the CSS class of an array of page links.
\param[in]  array $linkcolour_ids array of prefixed DB keys of the pages linked
to, indexed by page_id.
\param[out] array &$colours (output) array of CSS classes, indexed by prefixed
DB keys

\subsection GetLocalURL GetLocalURL
Modify local URLs as output into page links. Note that if you are working with
internal urls (non-interwiki) then it may be preferable to work with the
GetLocalURL::Internal or GetLocalURL::Article hooks as GetLocalURL can be buggy
for internal urls on render if you do not re-implement the horrible hack that
Title::getLocalURL uses in your own extension.
\param[in]  Title $title Title object of page
\param[out] string &$url string value as output (out parameter, can modify)
\param[in]  $query query options passed to Title::getLocalURL()

\subsection GetLocalURL::Internal GetLocalURL::Internal
Modify local URLs to internal pages.
\param[in]  Title $title Title object of page
\param[out] string &$url string value as output
\param[in]  $query query options passed to Title::getLocalURL()

\subsection GetLocalURL::Article GetLocalURL::Article
Modify local URLs specifically pointing to article paths without any fancy
queries or variants.
\param[in]  Title $title Title object of page
\param[out] string &$url string value as output (out parameter, can modify)

\subsection GetMetadataVersion GetMetadataVersion
Modify the image metadata version currently in use. This is used when
requesting image metadata from a ForeignApiRepo. Media handlers that need to
have versioned metadata should add an element to the end of the version array
of the form 'handler_name=version'. Most media handlers won't need to do this
unless they broke backwards compatibility with a previous version of the media
handler metadata output.
\param[out] array &$version Array of version strings

\subsection GetNewMessagesAlert GetNewMessagesAlert
Disable or modify the new messages alert
\param[out] string  &$newMessagesAlert An empty string by default. If the user
has new talk page messages, this should be populated with an alert message to
that effect
\param[in]  array $newtalks An empty array if the user has no new messages or an
array containing links and revisions if there are new messages (See
User::getNewMessageLinks)
\param[in]  User $user The user object of the user who is loading the page
\param[in]  OutputPage $out OutputPage object (to check what type of page the
user is on)

\subsection GetPreferences GetPreferences
Modify user preferences.
\param[in]  User $user User whose preferences are being modified.
\param[out] array &$preferences Preferences description array, to be fed to an
HTMLForm object

\subsection getUserPermissionsErrors getUserPermissionsErrors
Add a permissions error when permissions errors are checked for. Use instead of
userCan for most cases. Return false if the user can not do it, and populate
$result with the reason in the form of array( messagename, param1, param2, ...
). For consistency, error messages should be plain text with no special
coloring, bolding, etc. to show that they are errors; presenting them properly
to the user as errors is done by the caller.
\param[out] Title &$title Title object being checked against
\param[out] User &$user Current user object
\param[in]  Action $action Action being checked
\param[out] &$result User permissions error to add. If none, return true.

\subsection getUserPermissionsErrorsExpensive getUserPermissionsErrorsExpensive
Equal to getUserPermissionsErrors, but is called only if expensive checks are
enabled. Add a permissions error when permissions errors are checked for.
Return false if the user can not do it, and populate $result with the reason in
the form of array( messagename, param1, param2, ... ). For consistency, error
messages should be plain text with no special coloring, bolding, etc. to show
that they are errors; presenting them properly to the user as errors is done by
the caller.
\param[out] Title &$title Title object being checked against
\param[out] User &$user Current user object
\param[in]  Action $action Action being checked
\param[out] &$result User permissions error to add. If none, return true.

\subsection GitViewers GitViewers
Called when generating the list of git viewers for Special:Version, use this to
change the list.
\param[out] array &$extTypes associative array of repo URLS to viewer URLs.

\subsection HistoryRevisionTools HistoryRevisionTools
Override or extend the revision tools available from the page history view,
i.e. undo, rollback, etc.
\param[in]  Revision $rev Revision object
\param[out] array &$links Array of HTML links


\section Image Image*


\subsection ImageBeforeProduceHTML ImageBeforeProduceHTML
Called before producing the HTML created by a wiki image insertion. You can
skip the default logic entirely by returning false, or just modify a few things
using call-by-reference.
\param[out] Skin &$skin Skin object
\param[out] Title &$title Title object of the image
\param[out] File &$file File object, or false if it does not exist
\param[out] &$frameParams Various parameters with special meanings; see
documentation in includes/Linker.php for Linker::makeImageLink
\param[out] &$handlerParams Various parameters with special meanings; see
documentation in includes/Linker.php for Linker::makeImageLink
\param[out] &$time Timestamp of file in 'YYYYMMDDHHIISS' string form, or false
for current
\param[out] string &$res Final HTML output, used if you return false


\subsection ImageOpenShowImageInlineBefore ImageOpenShowImageInlineBefore
Call potential extension just before showing the image on an image page.
\param[out] ImagePage &$imagePage ImagePage object
\param[out] OutputPage &$output $wgOut

\subsection ImagePageAfterImageLinks ImagePageAfterImageLinks
Called after the image links section on an image page is built.
\param[in]  ImagePage $imagePage: ImagePage object
\param[out] string &$html HTML for the hook to add

\subsection ImagePageFileHistoryLine ImagePageFileHistoryLine
Called when a file history line is constructed.
\param[in]  ImagePage $imagepage
\param[in]  File $file the file
\param[out] string &$line the HTML of the history line
\param[out] string &$css the line CSS class

\subsection ImagePageFindFile ImagePageFindFile
Called when fetching the file associated with an image page.
\param[in]  ImagePage $page ImagePage object
\param[out] File &$file File object
\param[out] &$displayFile: displayed File object

\subsection ImagePageShowTOC ImagePageShowTOC
Called when the file toc on an image page is generated.
\param[in]  ImagePage $page: ImagePage object
\param[out] array &$toc: Array of \<li\> strings

\subsection ImgAuthBeforeStream ImgAuthBeforeStream
Executed before file is streamed to user, but only when using img_auth.php.
\param[out] &$title: the Title object of the file as it would appear for the upload page
\param[out] &$path: the original file and path name when img_auth was invoked by the the web
  server
\param[out] &$name: the name only component of the file
\param[out] &$result: The location to pass back results of the hook routine (only used if
  failed)
  $result[0]=The index of the header message
  $result[1]=The index of the body text message
  $result[2 through n]=Parameters passed to body text message. Please note the
  header message cannot receive/use parameters.


\section Import import*


\subsection ImportHandleLogItemXMLTag ImportHandleLogItemXMLTag
When parsing a XML tag in a log item.
\param[in] XMLReader $reader XMLReader object
\param[in] array $logInfo Array of information
Return false to stop further processing of the tag

\subsection ImportHandlePageXMLTag ImportHandlePageXMLTag
When parsing a XML tag in a page.
\param[in] XMLReader $reader XMLReader object
\param[in] array $pageInfo Array of information
\return Return false to stop further processing of the tag

\subsection ImportHandleRevisionXMLTag ImportHandleRevisionXMLTag
When parsing a XML tag in a page revision.
\param[in] XMLReader $reader XMLReader object
\param[in] array $pageInfo Array of page information
\param[in] array $revisionInfo Array of revision information
\return Return false to stop further processing of the tag

\subsection ImportHandleToplevelXMLTag ImportHandleToplevelXMLTag
When parsing a top level XML tag.
\param[in] XMLReader $reader XMLReader object
\return Return false to stop further processing of the tag

\subsection ImportHandleUploadXMLTag ImportHandleUploadXMLTag
When parsing a XML tag in a file upload.
\param[in] XMLReader $reader XMLReader object
\param[in] array $revisionInfo Array of information
\return Return false to stop further processing of the tag

\subsection InfoAction InfoAction
When building information to display on the action=info page.
\param[in]  IContextSource $context IContextSource object
\param[out] array &$pageInfo: Array of information

\subsection InitializeArticleMaybeRedirect InitializeArticleMaybeRedirect
MediaWiki check to see if title is a redirect.
\param[out] Title &$title Title object ($wgTitle)
\param[out] WebRequest &$request WebRequest
\param[out] bool &$ignoreRedirect boolean to skip redirect check
\param[out] mixed &$target Title/string of redirect target
\param[out] Article &$article Article object

\subsection InterwikiLoadPrefix InterwikiLoadPrefix
When resolving if a given prefix is an interwiki or not.  Return true without
providing an interwiki to continue interwiki search.
\param[in]  string $prefix: interwiki prefix we are looking for.
\param[out] array &$iwData: output array describing the interwiki with keys iw_url,
iw_local, iw_trans and optionally iw_api and iw_wikiid.

\subsection InternalParseBeforeSanitize InternalParseBeforeSanitize
During Parser's internalParse method just before the parser removes
unwanted/dangerous HTML tags and after nowiki/noinclude/
includeonly/onlyinclude and other processings. Ideal for syntax-extensions
after template/parser function execution which respect nowiki and
HTML-comments.
\param[out] Parser &$parser Parser object
\param[out] string &$text string containing partially parsed text
\param[out] StripState &$stripState Parser's internal StripState object

\subsection InternalParseBeforeLinks InternalParseBeforeLinks
During Parser's internalParse method before links but after
nowiki/noinclude/includeonly/onlyinclude and other processings.
\param[out] Parser &$parser Parser object
\param[out] String &$text string containing partially parsed text
\param[out] StripState &$stripState Parser's internal StripState object

\subsection InvalidateEmailComplete InvalidateEmailComplete
Called after a user's email has been invalidated successfully.
\param[in] User $user user (object) whose email is being invalidated

\subsection IRCLineURL IRCLineURL
When constructing the URL to use in an IRC notification.
Callee may modify $url and $query, URL will be constructed as $url . $query
\param[out] string &$url URL to index.php
\param[out] string &$query Query string

\subsection IsFileCacheable IsFileCacheable
Override the result of Article::isFileCacheable() (if true)
\param[in] Article $article article (object) being checked

\subsection IsTrustedProxy IsTrustedProxy
Override the result of wfIsTrustedProxy()
\param[in] string $ip IP being check
\param[in] $result: Change this value to override the result of wfIsTrustedProxy()

\subsection isValidEmailAddr isValidEmailAddr
Override the result of User::isValidEmailAddr(), for instance to return false
if the domain name does not match your organization.
\param[in]  string $addr: The e-mail address entered by the user
\param[out] &$result: Set this and return false to override the internal checks

\subsection isValidPassword isValidPassword
Override the result of User::isValidPassword()
\param[in]  string $password: The password entered by the user
\param[out] &$result: Set this and return false to override the internal checks
\param[in]  User $user: User the password is being validated for


\section Language Language*


\subsection Language::getMessagesFileName: Language::getMessagesFileName:
\param[in]  string $code The language code or the language we are looking for a
messages file for
\param[out] string &$file The messages file path, you can override this to
change the location.

\subsection LanguageGetNamespaces LanguageGetNamespaces
Provide custom ordering for namespaces or remove namespaces. Do not use this
hook to add namespaces. Use CanonicalNamespaces for that.
\param[out] array &$namespaces Array of namespaces indexed by their numbers

\subsection LanguageGetMagic LanguageGetMagic
DEPRECATED, use $magicWords in a file listed in $wgExtensionMessagesFiles
instead.  Use this to define synonyms of magic words depending of the language
\param[in] array $magicExtensions associative array of magic words synonyms
\param[in] string $lang language code

\subsection LanguageGetSpecialPageAliases LanguageGetSpecialPageAliases
DEPRECATED, use $specialPageAliases in a file listed in
$wgExtensionMessagesFiles instead.
Use to define aliases of special pages names depending of the language
\param[in] array $specialPageAliases associative array of magic words synonyms
\param[in] string $lang language code

\subsection LanguageGetTranslatedLanguageNames LanguageGetTranslatedLanguageNames
Provide translated language names.
\param[out] &$names: array of language code => language name
\param[in] $code language of the preferred translations

\subsection LanguageLinks LanguageLinks
Manipulate a page's language links. This is called in various places to allow
extensions to define the effective language links for a page.
\param[in]  Title $title The page's Title.
\param[out] array &$links Associative array mapping language codes to prefixed
links of the form "language:title".
\param[out] array &$linkFlags Associative array mapping prefixed links to arrays of flags.
  Currently unused, but planned to provide support for marking individual
  language links in the UI, e.g. for featured articles.


\section Link Link*


\subsection LinkBegin LinkBegin
Used when generating internal and interwiki links in Linker::link(), before
processing starts.  Return false to skip default processing and return $ret.
See documentation for Linker::link() for details on the expected meanings of
parameters.
\param[in]  Skin $skin the Skin object
\param[in]  Title $target the Title that the link is pointing to
\param[out] string &$html the contents that the \<a\> tag should have (raw
HTML); null means "default".
\param[out] array &$customAttribs the HTML attributes that the \<a\> tag should
have, in associative array form, with keys and values unescaped.  Should be
merged with default values, with a value of false meaning to suppress the
attribute.
\param[out] string &$query the query string to add to the generated URL (the
bit after the "?"), in associative array form, with keys and values unescaped.
\param[out] array &$options: array of options.  Can include 'known', 'broken',
'noclasses'.
\param[out] &$ret the value to return if your hook returns false.

\subsection LinkEnd LinkEnd
Used when generating internal and interwiki links in Linker::link(),
just before the function returns a value.
\return If you return true, an \<a\> element with HTML attributes $attribs and
contents $html will be returned.  If you return false, $ret will be returned.
\param[in]  Skin $skin the Skin object
\param[in]  Title $target the Title object that the link is pointing to
\param[in]  $options the options.  Will always include either 'known' or
'broken', and may include 'noclasses'.
\param[out] string &$html the final (raw HTML) contents of the \<a\> tag, after
processing.
\param[out] array &$attribs the final HTML attributes of the \<a\> tag, after
processing, in associative array form.
\param[out] &$ret the value to return if your hook returns false.

\subsection LinkerMakeExternalImage LinkerMakeExternalImage
At the end of Linker::makeExternalImage() just before the return.
\param[out] string &$url the image url
\param[out] string &$alt the image's alt text
\param[out] string &$img the new image HTML (if returning false)

\subsection LinkerMakeExternalLink LinkerMakeExternalLink
At the end of Linker::makeExternalLink() just before the return.
\param[out] string &$url the link url
\param[out] string &$text the link text
\param[out] string &$link the new link HTML (if returning false)
\param[out] array &$attribs the attributes to be applied.
\param[in]  string $linkType The external link type

\subsection LinksUpdate LinksUpdate
At the beginning of LinksUpdate::doUpdate() just before the actual update.
\param[out] LinksUpdate &$linksUpdate the LinksUpdate object

\subsection LinksUpdateAfterInsert LinksUpdateAfterInsert
At the end of LinksUpdate::incrTableUpdate() after each link table insert.  For
example, pagelinks, imagelinks, externallinks.
\param[in] LinksUpdate $linksUpdate LinksUpdate object
\param[in] $table the table to insert links to
\param[in] $insertions an array of links to insert

\subsection LinksUpdateComplete LinksUpdateComplete
At the end of LinksUpdate::doUpdate() when updating, including delete and
insert, has completed for all link tables
\param[out] LinksUpdate &$linksUpdate: the LinksUpdate object

\subsection LinksUpdateConstructed LinksUpdateConstructed
At the end of LinksUpdate() is construction.
\param[out] LinksUpdate &$linksUpdate the LinksUpdate object

\subsection ListDefinedTags ListDefinedTags
When trying to find all defined tags.
\param[out] &$tags The list of tags.

\subsection LoadExtensionSchemaUpdates LoadExtensionSchemaUpdates
Called during database installation and updates.
\param[in] DatabaseUpdater &updater A DatabaseUpdater subclass

\subsection LocalFile::getHistory LocalFile::getHistory
Called before file history query performed.
\param[out] File &$file the File object
\param[out] &$tables tables
\param[out] &$fields select fields
\param[out] &$conds conditions
\param[out] &$opts query options
\param[out] &$join_conds JOIN conditions

\subsection LocalFilePurgeThumbnails LocalFilePurgeThumbnails
Called before thumbnails for a local file a purged.
\param[in] File $file the File object
\param[in] string|false $archiveName name of an old file version or false if it is the
current one

\subsection LocalisationCacheRecache LocalisationCacheRecache
Called when loading the localisation data into cache.
\param[in]  LocalisationCache $cache The LocalisationCache object
\param[in]  string $code language code
\param[out] &$alldata: The localisation data from core and extensions

\subsection LogEventsListShowLogExtract LogEventsListShowLogExtract
Called before the string is added to OutputPage.
\return Returning false will prevent the string from being added to the OutputPage.
\param[out] &$s: html string to show for the log extract
\param[in] $types: String or Array Log types to show
\param[in] $page: String or Title The page title to show log entries for
\param[in] $user: String The user who made the log entries
\param[in] $param: Associative Array with the following additional options:
  - lim Integer Limit of items to show, default is 50
  - conds Array Extra conditions for the query (e.g. "log_action != 'revision'")
  - showIfEmpty boolean Set to false if you do not want any output in case the
    loglist is empty if set to true (default), "No matching items in log" is
    displayed if loglist is empty
  - msgKey Array If you want a nice box with a message, set this to the key of
    the message. First element is the message key, additional optional elements
    are parameters for the key that are processed with
    wfMessage()->params()->parseAsBlock()
  - offset Set to overwrite offset parameter in $wgRequest set to '' to unset
    offset
  - wrap String Wrap the message in html (usually something like
    "&lt;div ...>$1&lt;/div>").
  - flags Integer display flags (NO_ACTION_LINK,NO_EXTRA_USER_LINKS)

\subsection LoginAuthenticateAudit LoginAuthenticateAudit
A login attempt for a valid user account either succeeded or failed.
\return No return data is accepted; this hook is for auditing only.
\param[in] User $user the User object being authenticated against
\param[in] string $password the password being submitted and found wanting
\param[in] LoginForm $retval a LoginForm class constant with
authenticateUserData() return value (SUCCESS, WRONG_PASS, etc.).

\subsection LogLine LogLine
Processes a single log entry on Special:Log.
\param[in] $log_type: string for the type of log entry (e.g. 'move'). Corresponds to
  logging.log_type database field.
\param[in] $log_action: string for the type of log action (e.g. 'delete', 'block',
  'create2'). Corresponds to logging.log_action database field.
\param[in] $title: Title object that corresponds to logging.log_namespace and
  logging.log_title database fields.
\param[in] $paramArray: Array of parameters that corresponds to logging.log_params field.
  Note that only $paramArray[0] appears to contain anything.
\param[out] &$comment: string that corresponds to logging.log_comment database field, and
  which is displayed in the UI.
\param[out] &$revert: string that is displayed in the UI, similar to $comment.
\param[in] $time: timestamp of the log entry (added in 1.12)

\subsection MaintenanceRefreshLinksInit MaintenanceRefreshLinksInit
Before executing the refreshLinks.php maintenance script.
\param[in] RefreshLinks $refreshLinks RefreshLinks object

\subsection MagicWordwgVariableIDs MagicWordwgVariableIDs
When defining new magic words IDs.
\param[in] array $variableIDs array of strings

\subsection MakeGlobalVariablesScript MakeGlobalVariablesScript
Called right before Skin::makeVariablesScript is executed. Ideally, this hook
should only be used to add variables that depend on the current page/request;
static configuration should be added through ResourceLoaderGetConfigVars
instead.
\param[out] &$vars variable (or multiple variables) to be added into the output
of Skin::makeVariablesScript
\param[in] OutputPage $out The OutputPage which called the hook, can be used to
get the real title.

\subsection MarkPatrolled MarkPatrolled
Before an edit is marked patrolled.
\param[in] int $rcid ID of the revision to be marked patrolled
\param[in] User $user the user (object) marking the revision as patrolled
\param[in] bool $wcOnlySysopsCanPatrol config setting indicating whether the
user needs to be a sysop in order to mark an edit patrolled.

\subsection MarkPatrolledComplete MarkPatrolledComplete
After an edit is marked patrolled.
\param[in] int $rcid ID of the revision marked as patrolled
\param[in] User $user user (object) who marked the edit patrolled
\param[in] bool $wcOnlySysopsCanPatrol config setting indicating whether the
user must be a sysop to patrol the edit.

\subsection MediaWikiPerformAction MediaWikiPerformAction
Override MediaWiki::performAction(). Use this to do something completely
different, after the basic globals have been set up, but before ordinary
actions take place.
\param[in] OutputPage $output $wgOut
\param[in] ArticlePage $article $wgArticle
\param[in] Title $title $wgTitle
\param[in] User $user $wgUser
\param[in] WebRequest $request $wgRequest
\param[in] MediaWiki $mediaWiki The $mediawiki object

\subsection MessagesPreLoad MessagesPreLoad
When loading a message from the database.
\param[in] string $title title of the message
\param[in] string $message value, change it to the message you want to define

\subsection MessageCacheReplace MessageCacheReplace
When a message page is changed. Useful for updating caches.
\param[in] string $title name of the page changed.
\param[in] string $text new contents of the page.

\subsection ModifyExportQuery ModifyExportQuery
Modify the query used by the exporter.
\param[in]  Database $db The database object to be queried.
\param[out] array &$tables Tables in the query.
\param[out] array &$conds Conditions in the query.
\param[out] array &$opts Options for the query.
\param[out] array &$join_conds Join conditions for the query.

\subsection MonoBookTemplateToolboxEnd MonoBookTemplateToolboxEnd
DEPRECATED.
Called by Monobook skin after toolbox links have been rendered (useful for
adding more). Note: this is only run for the Monobook skin. To add items to the
toolbox you should use the SkinTemplateToolboxEnd hook instead, which works for
all "SkinTemplate"-type skins.
\param[in] array $tools array of tools

\subsection BaseTemplateToolbox BaseTemplateToolbox
Called by BaseTemplate when building the $toolbox array and returning it for
the skin to output. You can add items to the toolbox while still letting the
skin make final decisions on skin-specific markup conventions using this hook.
\param[out] BaseTemplate &$sk The BaseTemplate base skin template
\param[out] array &$toolbox An array of toolbox items, see
BaseTemplate::getToolbox and BaseTemplate::makeListItem for details on the
format of individual items inside of this array.

\subsection NamespaceIsMovable NamespaceIsMovable
Called when determining if it is possible to pages in a namespace.
\param[in] int $index the index of the namespace being checked.
\param[in] bool $result whether MediaWiki currently thinks that pages in this
namespace are movable. Hooks may change this value to override the return value
of MWNamespace::isMovable().

\subsection NewRevisionFromEditComplete NewRevisionFromEditComplete
Called when a revision was inserted due to an edit.
\param[in] WikiPage $wikiPage the WikiPage edited
\param[in] $rev the new revision
\param[in] $baseID the revision ID this was based off, if any
\param[in] User $user the editing user

\subsection NormalizeMessageKey NormalizeMessageKey
Called before the software gets the text of a message (stuff in the MediaWiki:
namespace), useful for changing WHAT message gets displayed.
\param[out] &$key the message being looked up. Change this to something else to change
  what message gets displayed (string)
\param[out] &$useDB whether or not to look up the message in the database (bool)
\param[out] &$langCode the language code to get the message for (string) - or -
  whether to use the content language (true) or site language (false) (bool)
\param[out] &$transform whether or not to expand variables and templates
  in the message (bool)

\subsection OldChangesListRecentChangesLine OldChangesListRecentChangesLine
Customize entire recent changes line.
\return Return false to omit the line from RecentChanges and Watchlist special
pages.
\param[out] OldChangesList &$changeslist The OldChangesList instance.
\param[out] string &$s HTML of the form "\<li\>...\</li\>" containing one
recent change entry.
\param[out] RecentChange &$rc The RecentChange object.
\param[out] array &$classes array of css classes for the \<li\> element

\subsection OpenSearchUrls OpenSearchUrls
Called when constructing the OpenSearch description XML. Hooks can alter or
append to the array of URLs for search & suggestion formats.
\param[out] array &$urls array of associative arrays with Url element attributes

\subsection OtherBlockLogLink OtherBlockLogLink
Get links to the block log from extensions which blocks users and/or IP
addresses too.
\param[in] $otherBlockLink An array with links to other block logs
\param[in] $ip The requested IP address or username

\subsection OutputPageBeforeHTML OutputPageBeforeHTML
A page has been processed by the parser and the resulting HTML is about to be
displayed.
\param[in] ParserOutput $parserOutput ParserOutput object that corresponds to
the page
\param[in] string $text the text that will be displayed, in HTML

\subsection OutputPageBodyAttributes OutputPageBodyAttributes
Called when OutputPage::headElement is creating the body tag to allow for
extensions to add attributes to the body of the page they might need. Or to
allow building extensions to add body classes that are not of high enough
demand to be included in core.
\param[in]  OutputPage $out The OutputPage which called the hook, can be used
to get the real title
\param[in]  Skin $skin The Skin that called OutputPage::headElement
\param[out] array &$bodyAttrs An array of attributes for the body tag passed to
Html::openElement

\subsection OutputPageCheckLastModified OutputPageCheckLastModified
When checking if the page has been modified since the last visit.
\param[out] array &$modifiedTimes array of timestamps.
	The following keys are set: page, user, epoch

\subsection OutputPageParserOutput OutputPageParserOutput
After adding a parserOutput to $wgOut
\param[in] OutputPage $out OutputPage instance
\param[in] ParserOutput $parserOutput parserOutput instance being added in $out

\subsection OutputPageMakeCategoryLinks OutputPageMakeCategoryLinks
Links are about to be generated for the page's categories.
\return Implementations should return false if they generate the category
links, so the default link generation is skipped.
\param[in] OutputPage $out OutputPage instance
\param[in] array $categories associative array, keys are category names, values
are category types ("normal" or "hidden")
\param[in] array $links array, intended to hold the result. Must be an
associative array with category types as keys and arrays of HTML links as
values.


\section Page Page*


\subsection PageContentInsertComplete PageContentInsertComplete
After a new article is created.
\param[in] $wikiPage: WikiPage created
\param[in] $user: User creating the article
\param[in] $content: New content as a Content object
\param[in] $summary: Edit summary/comment
\param[in] $isMinor: Whether or not the edit was marked as minor
\param[in] $isWatch: (No longer used)
\param[in] $section: (No longer used)
\param[in] $flags: Flags passed to WikiPage::doEditContent()
\param[in] $revision: New Revision of the article

\subsection PageContentLanguage PageContentLanguage
Allows changing the language in which the content of a page is written.
Defaults to the wiki content language ($wgContLang).
\param[in]  Title $title Title object
\param[out] string|Language &$pageLang the page content language (either an
object or a language code)
\param[in]  Language $wgLang the user language

\subsection PageContentSave PageContentSave
Before an article is saved.
\param[in] WikiPage $wikiPage the WikiPage being saved
\param[in] User $user the user saving the article
\param[in] Content $content the new article content, as a Content object
\param[in] string $summary the article summary (comment)
\param[in] $isminor minor flag
\param[in] $iswatch watch flag
\param[in] $section section #

\subsection PageContentSaveComplete PageContentSaveComplete
After an article has been updated.
\param[in] $wikiPage WikiPage modified
\param[in] $user User performing the modification
\param[in] $content New content, as a Content object
\param[in] $summary Edit summary/comment
\param[in] $isMinor Whether or not the edit was marked as minor
\param[in] $isWatch (No longer used)
\param[in] $section (No longer used)
\param[in] $flags Flags passed to WikiPage::doEditContent()
\param[in] $revision New Revision of the article
\param[in] $status Status object about to be returned by doEditContent()
\param[in] $baseRevId the rev ID (or false) this edit was based on

\subsection PageHistoryBeforeList PageHistoryBeforeList
When a history page list is about to be constructed.
\param[in] $article the article that the history is loading for
\param[in] RequestContext $context RequestContext object

\subsection PageHistoryLineEnding PageHistoryLineEnding
Right before the end \<li\> is added to a history line.
\param[in] $row the revision row for this line
\param[in] string $s the string representing this parsed line
\param[in] array $classes array containing the \<li\> element classes

\subsection PageHistoryPager::getQueryInfo PageHistoryPager::getQueryInfo
When a history pager query parameter set is constructed.
\param[in] $pager the pager
\param[in] $queryInfo the query parameters

\subsection PageRenderingHash PageRenderingHash
Alter the parser cache option hash key. A parser extension which depends on
user options should install this hook and append its values to the key.
\param[in] $hash reference to a hash key string which can be modified


\section Parser Parser*


\subsection ParserAfterParse ParserAfterParse
Called from Parser::parse() just after the call to Parser::internalParse()
returns.
\param[in] Parser $parser parser object
\param[in] string $text text being parsed
\param[in] StripState $stripState stripState used (object)

\subsection ParserAfterStrip ParserAfterStrip
Called at end of parsing time.
TODO: No more strip, deprecated ?
\param[in] Parser $parser parser object
\param[in] string $text text being parsed
\param[in] StripState $stripState stripState instance being used

\subsection ParserAfterTidy ParserAfterTidy
Called after Parser::tidy() in Parser::parse()
\param[in] Parser $parser Parser object being used
\param[in] string $text text that will be returned

\subsection ParserBeforeInternalParse ParserBeforeInternalParse
Called at the beginning of Parser::internalParse().
\param[in] Parser $parser Parser object
\param[in] string $text text to parse
\param[in] StripState $stripState StripState instance being used

\subsection ParserBeforeStrip ParserBeforeStrip
Called at start of parsing time.
TODO: No more strip, deprecated ?
\param[in] Parser $parser parser object
\param[in] string $text text being parsed
\param[in] StripState $stripState stripState instance being used

\subsection ParserBeforeTidy ParserBeforeTidy
Called before tidy and custom tags replacements.
\param[in] Parser $parser Parser object being used
\param[in] string $text actual text

\subsection ParserClearState ParserClearState
Called at the end of Parser::clearState().
\param[in] Parser $parser Parser object being cleared

\subsection ParserCloned ParserCloned
Called when the parser is cloned.
\param[in] Parser $parser Newly-cloned Parser object

\subsection ParserFirstCallInit ParserFirstCallInit
Called when the parser initialises for the first time.
\param[out] Parser &$parser Parser object being cleared

\subsection ParserGetVariableValueSwitch ParserGetVariableValueSwitch
Called when the parser need the value of a custom magic word
\param[in] Parser $parser Parser object
\param[in] array $varCache array to store the value in case of multiples calls
of the same magic word
\param[in] string $index index (string) of the magic
\param[in] $ret value of the magic word (the hook should set it)
\param[in] PPFrame $frame PPFrame object to use for expanding any template variables

\subsection ParserGetVariableValueTs ParserGetVariableValueTs
Use this to change the value of the time for the {{LOCAL...}} magic word.
\param[in] Parser $parser Parser object
\param[in] int $time actual time (timestamp)

\subsection ParserGetVariableValueVarCache ParserGetVariableValueVarCache
Use this to change the value of the variable cache or return false to not use
it.
\param[in] Parser $parser Parser object
\param[in] array $varCache variable cache (array)

\subsection ParserLimitReport ParserLimitReport
Called at the end of Parser:parse() when the parser will include comments about
size of the text parsed.
\param[in] Parser $parser Parser object
\param[in] string $limitReport text that will be included (without comment tags)

\subsection ParserMakeImageParams ParserMakeImageParams
Called before the parser make an image link, use this to modify the parameters
of the image.
\param[in]  Title $title title object representing the file
\param[in]  File $file file object that will be used to create the image
\param[out] array &$params 2-D array of parameters
\param[in]  Parser $parser Parser object that called the hook

\subsection ParserSectionCreate ParserSectionCreate
Called each time the parser creates a document section from wikitext. Use this
to apply per-section modifications to HTML (like wrapping the section in a
DIV).
Caveat: DIVs are valid wikitext, and a DIV can begin in one section and end in
another. Make sure your code can handle that case gracefully. See the
EditSectionClearerLink extension for an example.
\param[in]  Parser $parser the calling Parser instance
\param[in]  int $section the section number, zero-based, but section 0 is usually empty
\param[out] &$sectionContent ref to the content of the section. modify this.
\param[in]  bool $showEditLinks boolean describing whether this section has an edit link

\subsection ParserTestParser ParserTestParser
Called when creating a new instance of Parser in tests/parser/parserTests.inc.
\param[in] Parser $parser Parser object created

\subsection ParserTestGlobals ParserTestGlobals
Allows to define globals for parser tests.
\param[out] array &$globals Array with all the globals which should be set for
parser tests.  The arrays keys serve as the globals names, its values are the
globals values.

\subsection ParserTestTables ParserTestTables
Alter the list of tables to duplicate when parser tests are run. Use when page
save hooks require the presence of custom tables to ensure that tests continue
to run properly.
\param[out] array &$tables array of table names

\subsection PersonalUrls PersonalUrls
Alter the user-specific navigation links (e.g. "my page, my talk page, my
contributions" etc).
\param[out] array &$personal_urls Array of link specifiers (see SkinTemplate.php)
\param[out] Title &$title Title object representing the current page

\subsection PingLimiter PingLimiter
Allows extensions to override the results of User::pingLimiter().
\param[out]  User &$user User performing the action
\param[in]   Action $action Action being performed
\param[out]  bool &$result Whether or not the action should be prevented
\return Change $result and return false to give a definitive answer, otherwise
the built-in rate limiting checks are used, if enabled.

\subsection PlaceNewSection PlaceNewSection
Override placement of new sections.
\param[in]  WikiPage $wikipage  WikiPage object
\param[in]  string $oldtext  the text of the article before editing
\param[in]  string $subject  subject of the new section
\param[out] string &$text  text of the new section
\return Return false and put the merged text into $text to override the default
behavior.

\subsection PreferencesGetLegend PreferencesGetLegend
Override the text used for the \<legend\> of a preferences section.
\param[in]  $form the PreferencesForm object. This is a ContextSource as well
\param[in]  string $key the section name
\param[out] string &$legend the legend text. Defaults to wfMessage(
"prefs-$key" )->text() but may be overridden

\subsection PrefixSearchBackend PrefixSearchBackend
Override the title prefix search used for OpenSearch and AJAX search
suggestions.
\return Put results into &$results outparam and return false.
\param[in]  array $ns array of int namespace keys to search in
\param[in]  string $search search term (not guaranteed to be conveniently normalized)
\param[in]  int $limit  maximum number of results to return
\param[out] array &$results array of page names (strings)

\subsection PrefsEmailAudit PrefsEmailAudit
Called when user changes their email address.
\param[in] User $user User changing his email address
\param[in] string $oldaddr old email address
\param[in] string $newaddr new email address

\subsection PrefsPasswordAudit PrefsPasswordAudit
Called when user changes his password.
\param[in] User $user User changing his password
\param[in] string $newPass new password
\param[in] string $error error 'badretype', 'wrongpassword', 'error' or
'success'

\subsection ProtectionForm::buildForm ProtectionForm::buildForm
Called after all protection type fieldsets are made in the form.
\param[in] $article the title being (un)protected
\param[in] string $output a string of the form HTML so far

\subsection ProtectionForm::save ProtectionForm::save
Called when a protection form is submitted.
\param[in] $article the title being (un)protected
\param[in] string|array $errorMsg an html message string of an error or an
array of message name and its parameters

\subsection ProtectionForm::showLogExtract ProtectionForm::showLogExtract
Called after the protection log extract is shown.
\param[in] $article the page the form is shown for
\param[in] OutputPage $out OutputPage object

\subsection RawPageViewBeforeOutput RawPageViewBeforeOutput
Right before the text is blown out in action=raw.
\param[out] RawPage &$obj RawPage object
\param[out] string &$text The text that is going to be the output

\subsection RecentChange_save RecentChange_save
Called at the end of RecentChange::save().
\param[in] RecentChange $recentChange RecentChange object

\subsection RedirectSpecialArticleRedirectParams RedirectSpecialArticleRedirectParams
Lets you alter the set of parameter names such as "oldid" that are preserved
when using redirecting special pages such as Special:MyPage and Special:MyTalk.
\param[out] array &$redirectParams An array of parameters preserved by
redirecting special pages.

\subsection RequestContextCreateSkin RequestContextCreateSkin
Called when RequestContext::getSkin creates a skin instance. Can be used by an
extension override what skin is used in certain contexts.
\param[in] IContextSource $context The RequestContext the skin is being created
for.
\param[out] Skin &$skin: A variable reference you may set a Skin instance or
string key on to override the skin that will be used for the context.


\section ResourceLoader ResourceLoader


\subsection ResourceLoaderGetConfigVars ResourceLoaderGetConfigVars
Called at the end of ResourceLoaderStartUpModule::getConfig(). Use this to
export static configuration variables to JavaScript. Things that depend on the
current page or request state must be added through MakeGlobalVariablesScript
instead.
\param[out] array &$vars array( variable name => value )

\subsection ResourceLoaderGetStartupModules ResourceLoaderGetStartupModules
Run once the startup module is being generated.
This allows you to add modules to the startup module. This hook should be used
sparingly since any module added here will be loaded on all pages. This hook is
useful if you want to make code available to module loader scripts.

\subsection ResourceLoaderRegisterModules ResourceLoaderRegisterModules
Right before modules information is required, such as when responding to a
resource loader request or generating HTML output.
\param[out] ResourceLoader &$resourceLoader ResourceLoader object

\subsection ResourceLoaderTestModules ResourceLoaderTestModules
Let you add new JavaScript testing modules. This is called after the addition
of 'qunit' and MediaWiki testing resources.
\param[out] array &testModules array of JavaScript testing modules. The 'qunit'
framework, included in core, is fed using tests/qunit/QUnitTestResources.php.
\param[out] ResourceLoader &ResourceLoader object
\par Example:
To add a new qunit module named 'myext.tests':
\code
testModules['qunit']['myext.tests'] = array(
	'script' => 'extension/myext/tests.js',
	'dependencies' => <any module dependency you might have>
);
\endcode
For QUnit framework, the mediawiki.tests.qunit.testrunner dependency will be
added to any module.

\subsection RevisionInsertComplete RevisionInsertComplete
Called after a revision is inserted into the database.
\param[out] Revision &$revision the Revision
\param[in] $data the data stored in old_text.  The meaning depends on $flags:
if external is set, it is the URL of the revision text in external storage;
otherwise, it is the revision text itself.  In either case, if gzip is set, the
revision text is gzipped.
\param[in] string $flags a comma-delimited list of strings representing the
options used.  May include: utf8 (this will always be set for new revisions);
gzip; external.


\section Search Search*


\subsection SearchUpdate SearchUpdate
Prior to search update completion.
\param[in] int $id Page id
\param[in] int $namespace Page namespace
\param[in] string $title Page title
\param[in] string $text Current text being indexed

\subsection SearchGetNearMatchBefore SearchGetNearMatchBefore
Perform exact-title-matches in "go" searches before the normal operations.
\param[in]  Array $allSearchTerms Array of the search terms in all content languages
\param[out] Title &$titleResult the value to return. A Title object or null.

\subsection SearchAfterNoDirectMatch SearchAfterNoDirectMatch
If there was no match for the exact result. This runs before lettercase
variants are attempted, whereas 'SearchGetNearMatch' runs after.
\param[in]  string $term : Search term string
\param[out] Title &$title set to $title object and return false for a match
\return Return false for a match, and set $title.

\subsection SearchGetNearMatch SearchGetNearMatch
An extra chance for exact-title-matches in "go" searches if nothing was found.
\param[in]  string $term Search term string
\param[out] Title &$title set to $title object and return false for a match
\return Return false for a match, and set $title.

\subsection SearchGetNearMatchComplete SearchGetNearMatchComplete
A chance to modify exact-title-matches in "go" searches.
\param[in]  string $term Search term string
\param[out] Title &$title Current Title object that is being returned (null if none found).

\subsection SearchEngineReplacePrefixesComplete SearchEngineReplacePrefixesComplete
Run after SearchEngine::replacePrefixes().
\param[in]  SearchEngine $searchEngine The SearchEngine object. Users of this hooks will be interested
in the $searchEngine->namespaces array.
\param[in]  $query Original query.
\param[out] &$parsed Resultant query with the prefixes stripped.

\subsection SearchResultInitFromTitle SearchResultInitFromTitle
Set the revision used when displaying a page in search results.
\param[in]  Title $title Current Title object being displayed in search results.
\param[out] int &$id Revision ID (default is false, for latest)

\subsection SearchableNamespaces SearchableNamespaces
An option to modify which namespaces are searchable.
\param[out] array &$arr Array of namespaces ($nsId => $name) which will be
used.

\subsection SeleniumSettings SeleniumSettings
TODO

\subsection SetupAfterCache SetupAfterCache
Called in Setup.php, after cache objects are set

\subsection ShowMissingArticle ShowMissingArticle
Called when generating the output for a non-existent page.
\param[in] Article $article The article object corresponding to the page

\subsection ShowRawCssJs ShowRawCssJs
Customise the output of raw CSS and JavaScript in page views.
DEPRECATED, use the ContentHandler facility to handle CSS and JavaScript!
\param[in] string $text Text being shown
\param[in] Title $title Title of the custom script/stylesheet page
\param[in] OutputPage $output Current OutputPage object

\subsection ShowSearchHitTitle ShowSearchHitTitle
Customise display of search hit title/link.
\param[out] Title &$title Title to link to
\param[out] string &$text Text to use for the link
\param[in]  $result The search result
\param[in]  $terms The search terms entered
\param[in]  SpecialSearch $page The SpecialSearch object.

\subsection ShowSearchHit ShowSearchHit
Customize display of search hit.
\param[in]  SpecialSearch $searchPage The SpecialSearch instance.
\param[in]  SearchResult $result The SearchResult to show
\param[in]  $terms Search terms, for highlighting
\param[out] string &$link HTML of link to the matching page. May be modified.
\param[out] string &$redirect HTML of redirect info. May be modified.
\param[out] string &$section HTML of matching section. May be modified.
\param[out] string &$extract HTML of content extract. May be modified.
\param[out] string &$score HTML of score. May be modified.
\param[out] string &$size HTML of page size. May be modified.
\param[out] string &$date HTML of of page modification date. May be modified.
\param[out] string &$related HTML of additional info for the matching page. May be modified.
\param[out] string &$html May be set to the full HTML that should be used to
represent the search hit. Must include the \<li\> ... \</li\> tags. Will only
be used if the hook function returned false.
\return Returns false and set $html.

\subsection SiteNoticeBefore SiteNoticeBefore
Before the sitenotice/anonnotice is composed.
\returns Return true to allow the normal method of notice selection/rendering
to work, or change the value of $siteNotice and return false to alter it.
\param[out] string &$siteNotice HTML returned as the sitenotice
\param[in]  Skin $skin Skin object

\subsection SiteNoticeAfter SiteNoticeAfter
After the sitenotice/anonnotice is composed.
\param[out] string &$siteNotice HTML sitenotice. Alter the contents of
$siteNotice to add to/alter the sitenotice/anonnotice.
\param[in] Skin $skin Skin object


\section Skin Skin*


\subsection SkinAfterBottomScripts SkinAfterBottomScripts
At the end of Skin::bottomScripts().
\param[in] Skin $skin Skin object
\param[out] string &$text bottomScripts Text. Append to $text to add additional
text/scripts after the stock bottom scripts.

\subsection SkinAfterContent SkinAfterContent
Allows extensions to add text after the page content and article metadata. This
hook should work in all skins.
Set the &$data variable to the text you are going to add.
\param[out] string &$data Text to be printed out directly (without parsing)
\param[in]  Skin $skin Skin object

\subsection SkinBuildSidebar SkinBuildSidebar
At the end of Skin::buildSidebar().
Modify $bar to add or modify sidebar portlets.
\param[in]  Skin $skin Skin object
\param[out] &$bar Sidebar contents

\subsection SkinCopyrightFooter SkinCopyrightFooter
Allow for site and per-namespace customization of copyright notice.
\param[in] $title displayed page title
\param[in] $type 'normal' or 'history' for old/diff views
\param[out] &$msg overridable message; usually 'copyright' or
'history_copyright'. This message must be in HTML format, not wikitext!
\param[out] &$link overridable HTML link to be passed into the message as $1
\param[out] &$forContent overridable flag if copyright footer is shown in
content language.

\subsection SkinGetPoweredBy SkinGetPoweredBy
TODO
\param[out] &$text additional 'powered by' icons in HTML.  Note Modern skin
does not use the MediaWiki icon but plain text instead.
\param[in]  Skin $skin Skin object

\subsection SkinSubPageSubtitle SkinSubPageSubtitle
At the beginning of Skin::subPageSubtitle().
\param[out] &$subpages Subpage links HTML
\param[in]  Skin $skin Skin object
\param[in]  OutputPage $out OutputPage object
\returns If false is returned $subpages will be used instead of the HTML
subPageSubtitle() generates.  If true is returned, $subpages will be ignored
and the rest of subPageSubtitle() will run.

\subsection SkinTemplateBuildNavUrlsNav_urlsAfterPermalink SkinTemplateBuildNavUrlsNav_urlsAfterPermalink
After creating the "permanent
link" tab.
\param[in] SkinTemplate $sktemplate SkinTemplate object
\param[in] array $nav_urls array of tabs

To alter the structured navigation links in SkinTemplates, there are three
hooks called in different spots:

\subsection SkinTemplateNavigation SkinTemplateNavigation
Called on content pages after the tabs have been added, but before variants
have been added.
\subsection SkinTemplateNavigation::SpecialPage SkinTemplateNavigation::SpecialPage
Called on special pages after the special tab is added but before variants have
been added.
\subsection SkinTemplateNavigation::Universal SkinTemplateNavigation::Universal
Called on both content and special pages after variants have been added.
\param[out] SkinTemplate &$sktemplate SkinTemplate object
\param[out] &$links Structured navigation links. This is used to alter the navigation for
  skins which use buildNavigationUrls such as Vector.

\subsection SkinTemplateOutputPageBeforeExec SkinTemplateOutputPageBeforeExec
Before SkinTemplate::outputPage() starts page output.
\param[out] SkinTemplate &$sktemplate SkinTemplate object
\param[out] &$tpl Template engine object

\subsection SkinTemplatePreventOtherActiveTabs SkinTemplatePreventOtherActiveTabs
Use this to prevent showing active tabs.
\param[in] SkinTemplate $sktemplate SkinTemplate object
\param[in] bool $res set to true to prevent active tabs

\subsection SkinTemplateTabAction SkinTemplateTabAction
Override SkinTemplate::tabAction().
You can either create your own array, or alter the parameters for the normal
one.
\param[out] SkinTemplate &$sktemplate The SkinTemplate instance.
\param[in]  Title $title Title instance for the page.
\param[in]  string $message Visible label of tab.
\param[in]  bool $selected Whether this is a selected tab.
\param[in]  bool $checkEdit Whether or not the action=edit query should be
added if appropriate.
\param[out] array &$classes Array of CSS classes to apply.
\param[out] string &$query Query string to add to link.
\param[out] string &$text Link text.
\param[out] array &$result Complete assoc. array if you want to return true.

\subsection SkinTemplateToolboxEnd SkinTemplateToolboxEnd
Called by SkinTemplate skins after toolbox links have been rendered (useful for
adding more).
\param[in] QuickTemplate $sk The QuickTemplate based skin template running the
hook.
\param[in] $dummy Called when SkinTemplateToolboxEnd is used from a
BaseTemplate skin, extensions that add support for BaseTemplateToolbox should
watch for this dummy parameter with "$dummy=false" in their code and return
without echoing any HTML to avoid creating duplicate toolbox items.

\subsection SoftwareInfo SoftwareInfo
Called by Special:Version for returning information about the
software.
\param[in] array $software The array of software in format 'name' => 'version'.
See SpecialVersion::softwareInformation().


\section Special Special*

\subsection SpecialContributionsBeforeMainOutput SpecialContributionsBeforeMainOutput
Before the form on Special:Contributions
\param[in] int $id User identifier

\subsection SpecialListusersDefaultQuery SpecialListusersDefaultQuery
Called right before the end of UsersPager::getDefaultQuery().
\param[in]  UsersPager $pager The UsersPager instance
\param[out] array &$query The query array to be returned

\subsection SpecialListusersFormatRow SpecialListusersFormatRow
Called right before the end of UsersPager::formatRow().
\param[out] string &$item HTML to be returned. Will be wrapped in \<li\>\</li\>
after the hook finishes
\param[in]  $row Database row object

\subsection SpecialListusersHeader SpecialListusersHeader
Called before closing the \<fieldset\> in UsersPager::getPageHeader().
\param[in]  UsersPager $pager The UsersPager instance
\param[out] string $out The header HTML

\subsection SpecialListusersHeaderForm SpecialListusersHeaderForm
Called before adding the submit button in UsersPager::getPageHeader().
\param[in]  UsersPager $pager The UsersPager instance
\param[out] string $out The header HTML

\subsection SpecialListusersQueryInfo SpecialListusersQueryInfo
Called right before the end of.  UsersPager::getQueryInfo()
\param[in] UsersPager $pager The UsersPager instance
\param[in] array $query The query array to be returned

\subsection SpecialMovepageAfterMove SpecialMovepageAfterMove
Called after moving a page.
\param[out] MoagePageForm &$movePage MovePageForm object
\param[out] Title &$oldTitle old title
\param[out] Title &$newTitle new title

\subsection SpecialNewpagesConditions SpecialNewpagesConditions
Called when building sql query for Special:NewPages.
\param[out] NewPagesPager &$special NewPagesPager object (subclass of
ReverseChronologicalPager)
\param[in]  FormOptions $opts FormOptions object containing special page
options
\param[out] array &$conds array of WHERE conditionals for query
\param[out] array &tables array of tables to be queried
\param[out] array &$fields array of columns to select
\param[out] array &$join_conds join conditions for the tables

\subsection SpecialNewPagesFilters SpecialNewPagesFilters
Called after building form options at NewPages.
\param[in] $special the special page object
\param[out] array &$filters associative array of filter definitions. The keys
are the HTML name/URL parameters. Each key maps to an associative array with a
'msg' (message key) and a 'default' value.

\subsection SpecialPage_initList SpecialPage_initList
Called when setting up SpecialPage::$mList, use this hook to remove a core
special page.
\param[in] array $list list of core special pages

\subsection SpecialPageAfterExecute SpecialPageAfterExecute
Called after SpecialPage::execute.
\param[in] SpecialPage $special the SpecialPage object
\param[in] string|null $subPage the subpage string or null if no subpage was specified

\subsection SpecialPageBeforeExecute SpecialPageBeforeExecute
Called before SpecialPage::execute.
\param[in] SpecialPage $special the SpecialPage object
\param[in] string|null $subPage the subpage string or null if no subpage was specified

\subsection SpecialPasswordResetOnSubmit SpecialPasswordResetOnSubmit
When executing a form submission on Special:PasswordReset.
\param[in]  array $users array of User objects.
\param[in]  array $data array of data submitted by the user
\param[out] string &$error string, error code (message key) used to describe to
error (out parameter). The hook needs to return false when setting this,
otherwise it will have no effect.

\subsection SpecialRandomGetRandomTitle SpecialRandomGetRandomTitle
Called during the execution of Special:Random, use this to change some
selection criteria or substitute a different title.
\param[out] int &$randstr The random number from wfRandom()
\param[out] bool &$isRedir Whether to select a redirect or non-redirect
\param[out] array &$namespaces An array of namespace indexes to get the title
from
\param[out] array &$extra An array of extra SQL statements
\param[out] Title &$title If the hook returns false, a Title object to use
instead of the result from the normal query

\subsection SpecialRecentChangesFilters SpecialRecentChangesFilters
Called after building form options at RecentChanges.
\param[in]  $special the special page object
\param[out] array &$filters associative array of filter definitions. The keys
are the HTML name/URL parameters. Each key maps to an associative array with a
'msg' (message key) and a 'default' value.

\subsection SpecialRecentChangesPanel SpecialRecentChangesPanel
Called when building form options in SpecialRecentChanges.
\param[out] &$extraOpts array of added items, to which can be added
\param[in]  $opts FormOptions for this request

\subsection SpecialRecentChangesQuery SpecialRecentChangesQuery
Called when building SQL query for SpecialRecentChanges and
SpecialRecentChangesLinked.
\param[out] array &$conds array of WHERE conditionals for query
\param[out] array &$tables array of tables to be queried
\param[out] array &$join_conds join conditions for the tables
\param[in]  FormOptions$opts FormOptions for this request
\param[out] array &$query_options array of options for the database request
\param[out] array &$select Array of columns to select

\subsection SpecialSearchCreateLink SpecialSearchCreateLink
Called when making the message to create a page or go to the existing page.
\param[in]  Title $title title object searched for
\param[out] array &$params an array of the default message name and page title
(as parameter)

\subsection SpecialSearchGo SpecialSearchGo
Called when user clicked the "Go".
\param[out] Title &$title title object generated from the text entered by the user
\param[out] string &$term the search term entered by the user

\subsection SpecialSearchNogomatch SpecialSearchNogomatch
Called when user clicked the "Go" button but the target does not exist.
\param[out] Title &$title title object generated from the text entered by the
user

\subsection SpecialSearchPowerBox SpecialSearchPowerBox
The equivalent of SpecialSearchProfileForm for the advanced form, a.k.a. power
search box.
\param[out] Array &$showSections an array to add values with more options to
\param[in]  string $term the search term (not a title object)
\param[in]  array $opts an array of hidden options (containing 'redirs' and
'profile')

\subsection SpecialSearchProfiles SpecialSearchProfiles
Allows modification of search profiles.
\param[out] &$profiles profiles, which can be modified.

\subsection SpecialSearchProfileForm SpecialSearchProfileForm
Allows modification of search profile forms.
\param[in]  $search special page object
\param[out] string &$form form html
\param[in]  string $profile current search profile
\param[in]  string $term search term
\param[in]  array $opts key => value of hidden options for inclusion in custom forms

\subsection SpecialSearchSetupEngine SpecialSearchSetupEngine
Allows passing custom data to search engine.
\param[in] SpecialSearch $search SpecialSearch special page object
\param[in] string $profile current search profile
\param[in] SearchEngine $engine the search engine

\subsection SpecialSearchResultsPrepend SpecialSearchResultsPrepend
Called immediately before returning HTML on the search results page.  Useful for including an external search provider.
\return To disable the output of MediaWiki search output, return false.
\param[in] SpecialSearch $specialSearch SpecialSearch object ($this)
\param[in] OutputPage $output: $wgOut
\param[in] string $term Search term specified by the user

\subsection SpecialSearchResultsAppend SpecialSearchResultsAppend
Called after all search results HTML has been output.
\note that in some cases, this hook will not be called (no results, too many
results, SpecialSearchResultsPrepend returned false, etc).
\param[in] SpecialSearch $specialSearch SpecialSearch object ($this)
\param[in] OutputPage $output $wgOut
\param[in] string $term Search term specified by the user

\subsection SpecialSearchResults SpecialSearchResults
Called before search result display when there are matches.
\param[in]  string $term string of search term
\param[out] &$titleMatches empty or SearchResultSet object
\param[out] &$textMatches empty or SearchResultSet object

\subsection SpecialSearchNoResults SpecialSearchNoResults
Called before search result display when there are no matches.
\param[in] string $term string of search term

\subsection SpecialStatsAddExtra SpecialStatsAddExtra
Add extra statistic at the end of Special:Statistics.
\param[out] array &$extraStats Array to save the new stats
  ( $extraStats['\<name of statistic\>'] => <value>; )

\subsection SpecialUploadComplete SpecialUploadComplete
Called after successfully uploading a file from Special:Upload.
\param[in] SpecialUpload $form The SpecialUpload object

\subsection SpecialVersionExtensionTypes SpecialVersionExtensionTypes
Called when generating the extensions credits, use this to change the tables
headers.
\param[in] array $extTypes associative array of extensions types

\subsection SpecialVersionVersionUrl SpecialVersionVersionUrl
Called when building the URL for Special:Version.
\param[in]  $wgVersion Current $wgVersion for you to use
\param[out] &$versionUrl Raw url to link to (eg: release notes)

\subsection SpecialWatchlistFilters SpecialWatchlistFilters
Called after building form options at Watchlist.
\param[in] $special the special page object
\param[out] array &$filters associative array of filter definitions. The keys
are the HTML name/URL parameters. Each key maps to an associative array with a
'msg' (message key) and a 'default' value.

\subsection SpecialWatchlistQuery SpecialWatchlistQuery
Called when building sql query for SpecialWatchlist.
\param[out] array &$conds array of WHERE conditionals for query
\param[out] array &$tables array of tables to be queried
\param[out] array &$join_conds join conditions for the tables
\param[out] array &$fields array of query fields
\param[in]  array $values array of variables with watchlist options

\subsection TestCanonicalRedirect TestCanonicalRedirect
Called when about to force a redirect to a canonical URL for a title when we
have no other parameters on the URL. Gives a chance for extensions that alter
page view behavior radically to abort that redirect or handle it manually.
\param[in] WebRequest $request WebRequest
\param[in] Title $title Title of the currently found title obj
\param[in] OutputPage $output OutputPage object

\subsection ThumbnailBeforeProduceHTML ThumbnailBeforeProduceHTML
Called before an image HTML is about to be rendered (by ThumbnailImage:toHtml
method).
\param[in]  ThumbnailImage $thumbnail the ThumbnailImage object
\param[out] array &$attribs image attribute array
\param[out] array &$linkAttribs image link attribute array


\section Title Title*


\subsection TitleArrayFromResult TitleArrayFromResult
Called when creating an TitleArray object from a database result.
\param[out] &$title set this to an object to override the default object returned
\param[in]  $res database result used to create the object

\subsection TitleQuickPermissions TitleQuickPermissions
Called from Title::checkQuickPermissions to add to or override the quick
permissions check.
\param[in]  Title $title The Title object being accessed
\param[in]  User $user The User performing the action
\param[in]  Action $action Action being performed
\param[out] array &$errors Array of errors
\param[in]  bool $doExpensiveQueries Whether to do expensive DB queries
\param[in]  bool $short Whether to return immediately on first error

\subsection TitleGetRestrictionTypes TitleGetRestrictionTypes
Allows extensions to modify the types of protection that can be applied.
\param[in]  Title $title The title in question.
\param[out] &$types The types of protection available.

\subsection TitleIsCssOrJsPage TitleIsCssOrJsPage
Called when determining if a page is a CSS or JS page.
\param[in] Title $title Title object that is being checked
\param[in] bool $result whether MediaWiki currently thinks this is a CSS/JS
page.  Hooks may change this value to override the return value of
Title::isCssOrJsPage().

\subsection TitleIsAlwaysKnown TitleIsAlwaysKnown
Called when determining if a page exists.
Allows overriding default behavior for determining if a page exists. If
$isKnown is kept as null, regular checks happen. If it is a boolean, this value
is returned by the isKnown method.
\param[in]  Title $title Title object that is being checked
\param[out] bool|null &$isKnown whether MediaWiki currently thinks this page is
known

\subsection TitleIsMovable TitleIsMovable
Called when determining if it is possible to move a page. Note that this hook
is not called for interwiki pages or pages in immovable namespaces: for these,
isMovable() always returns false.
\param[in] Title $title Title object that is being checked
\param[in] bool $result whether MediaWiki currently thinks this page is
movable.  Hooks may change this value to override the return value of
Title::isMovable().

\subsection TitleIsWikitextPage TitleIsWikitextPage
Called when determining if a page is a wikitext or should be handled by
separate handler (via ArticleViewCustom).
\param[in] Title $title Title object that is being checked
\param[in] bool $result Boolean; whether MediaWiki currently thinks this is a
wikitext page.  Hooks may change this value to override the return value of
Title::isWikitextPage()

\subsection TitleMoveComplete TitleMoveComplete
After moving an article (title).
\param[in] Title $old old title
\param[in] Title $nt new title
\param[in] User $performer user who did the move
\param[in] int $pageid database ID of the page that has been moved
\param[in] int $redirid database ID of the created redirect

\subsection TitleReadWhitelist TitleReadWhitelist
Called at the end of read permissions checks, just before adding the default
error message if nothing allows the user to read the page. If a handler wants a
title to *not* be whitelisted, it should also return false.
\param[in]  Title $title Title object being checked against
\param[in]  User $user Current user object
\param[out] Bool &$whitelisted whether this title is whitelisted

\subsection TitleSquidURLs TitleSquidURLs
Called to determine which URLs to purge from HTTP caches.
\param[in]  Title $this Title object to purge
\param[out] array &$urls An array of URLs to purge from the caches, to be
manipulated.


\section Undelete Undelete*


\subsection UndeleteForm::showHistory UndeleteForm::showHistory
Called in UndeleteForm::showHistory, after a PageArchive object has been
created but before any further processing is done.
\param[out] PageArchive &$archive PageArchive object
\param[in]  Title $title Title object of the page that we are viewing

\subsection UndeleteForm::showRevision UndeleteForm::showRevision
Called in UndeleteForm::showRevision, after a PageArchive object has been
created but before any further processing is done.
\param[out] PageArchive &$archive PageArchive object
\param[in]  Title $title Title object of the page that we are viewing

\subsection UndeleteForm::undelete UndeleteForm::undelete
Called un UndeleteForm::undelete, after checking that the site is not in
read-only mode, that the Title object is not null and after a PageArchive
object has been constructed but before performing any further processing.
\param[out] PageArchive &$archive: PageArchive object
\param[in]  Title $title Title object of the page that we are about to undelete

\subsection UndeleteShowRevision UndeleteShowRevision
Called when showing a revision in Special:Undelete.
\param[in] Title $title title object related to the revision
\param[in] Revision $rev revision (object) that will be viewed

\subsection UnknownAction UnknownAction
An unknown "action" has occurred (useful for defining your own actions).
\param[in] string $action action name
\param[in] $article article "acted on"

\subsection UnitTestsList UnitTestsList
Called when building a list of files with PHPUnit tests.
\param[out] array &$files list of files

\subsection UnwatchArticle UnwatchArticle
Before a watch is removed from an article.
\param[in] User $user user watching
\param[in] WikiPage $page WikiPage object to be removed

\subsection UnwatchArticleComplete UnwatchArticleComplete
After a watch is removed from an article.
\param[in] User $user user that watched
\param[in] WikiPage $page WikiPage object that was watched

\subsection UpdateUserMailerFormattedPageStatus UpdateUserMailerFormattedPageStatus
Before notification email gets sent.
\param[in] array $formattedPageStatus list of valid page states

\subsection UploadForm:initial UploadForm:initial
Before the upload form is generated. You might set the member-variables
$uploadFormTextTop and $uploadFormTextAfterSummary to inject text (HTML) either
before or after the editform.
\param[in] UploadForm $form UploadForm object

\subsection UploadForm:BeforeProcessing UploadForm:BeforeProcessing
At the beginning of processUpload(). Lets you poke at member variables like
$mUploadDescription before the file is saved. Do not use this hook to break
upload processing. This will return the user to a blank form with no error
message; use UploadVerification and UploadVerifyFile instead.
\param[in] UploadForm $form UploadForm object

\subsection UploadCreateFromRequest UploadCreateFromRequest
When UploadBase::createFromRequest has been called.
\param[in]  string $type the requested upload type
\param[out] string &$className the class name of the Upload instance to be created

\subsection UploadComplete UploadComplete
When Upload completes an upload.
\param[out] UploadBase &$upload an UploadBase child instance

\subsection UploadFormInitDescriptor UploadFormInitDescriptor
After the descriptor for the upload form as been assembled.
\param[in] array $descriptor the HTMLForm descriptor

\subsection UploadFormSourceDescriptors UploadFormSourceDescriptors
After the standard source inputs have been added to the descriptor
\param[in] array $descriptor the HTMLForm descriptor

\subsection UploadVerification UploadVerification
Additional chances to reject an uploaded file. Consider
using UploadVerifyFile instead.
\param[in]  string $saveName: destination file name
\param[in]  string $tempName: filesystem path to the temporary file for checks
\param[out] string &$error: output: message key for message to show if upload
canceled by returning false. May also be an array, where the first element is
the message key and the remaining elements are used as parameters to the
message.

\subsection UploadVerifyFile UploadVerifyFile
Extra file verification, based on mime type, etc. Preferred
in most cases over UploadVerification.
\param[in] object $upload an instance of UploadBase, with all info about the
upload
\param[in] string $mime The uploaded file's mime type, as detected by
MediaWiki. Handlers will typically only apply for specific mime types.
\param[out] object &$error output: true if the file is valid. Otherwise, an
indexed array representing the problem with the file, where the first element
is the message key and the remaining elements are used as parameters to the
message.

\subsection UploadComplete UploadComplete
Upon completion of a file upload.
\param[in] UploadBase $uploadBase File can be accessed by
$uploadBase->getLocalFile().


\section User User*


\subsection User::mailPasswordInternal User::mailPasswordInternal
Before creation and mailing of a user's new temporary password
\param[in] User $user the user who sent the message out
\param[in] string $ip IP of the user who sent the message out
\param[in] User $u the account whose new password will be set

\subsection UserAddGroup UserAddGroup
Called when adding a group; return false to override stock group addition.
\param[in]  User $user the user object that is to have a group added
\param[out] Group &$group the group to add, can be modified

\subsection UserArrayFromResult UserArrayFromResult
Called when creating an UserArray object from a database result.
\param[out] array &$userArray set this to an object to override the default
object returned
\param[in] $res database result used to create the object

\subsection userCan userCan
To interrupt/advise the "user can do X to Y article" check. If you want to
display an error message, try getUserPermissionsErrors.
\param[in] Title $title Title object being checked against
\param[in] User $user  Current user object
\param[in] $action Action being checked
\param[in] $result Pointer to result returned if hook returns false. If null is
returned, userCan checks are continued by internal code.

\subsection UserCanSendEmail UserCanSendEmail
To override User::canSendEmail() permission check.
\param[in]  User $user User whose permission is being checked
\param[out] bool &$canSend bool set on input, can override on output

\subsection UserClearNewTalkNotification UserClearNewTalkNotification
Called when clearing the "You have new messages!" message, return false to not
delete it.
\param[in]  User $user User that will clear the message

\subsection UserComparePasswords UserComparePasswords
Called when checking passwords, return false to override the default password
checks.
\param[out] string &$hash String of the password hash (from the database)
\param[out] string &$password String of the plaintext password the user entered
\param[out] int &$userId Integer of the user's ID or Boolean false if the user
ID was not supplied
\param[out] &$result If the hook returns false, this Boolean value will be
checked to determine if the password was valid

\subsection UserCreateForm UserCreateForm
Change to manipulate the login form
\param[in] $template SimpleTemplate instance for the form

\subsection UserCryptPassword UserCryptPassword
Called when hashing a password, return false to implement your own hashing
method.
\param[out] &$password String of the plaintext password to encrypt
\param[out] &$salt String of the password salt or Boolean false if no salt is
provided
\param[out] &$wgPasswordSalt Boolean of whether the salt is used in the default
hashing method
\param[out] &$hash If the hook returns false, this String will be used as the
hash

\subsection UserEffectiveGroups UserEffectiveGroups
Called in User::getEffectiveGroups().
\param[in]  User $user User to get groups for
\param[out] array &$groups Current effective groups

\subsection UserGetAllRights UserGetAllRights
After calculating a list of all available rights.
\param[out] array &$rights Array of rights, which may be added to.

\subsection UserGetDefaultOptions UserGetDefaultOptions
After fetching the core default, this hook is run right before returning the
options to the caller. Warning: This hook is called for every call to
User::getDefaultOptions(), which means it is potentially called dozens or
hundreds of times. You may want to cache the results of non-trivial operations
in your hook function for this reason.
\param[out] array &$defaultOptions Array of preference keys and their default
values.

\subsection UserGetEmail UserGetEmail
Called when getting an user email address.
\param[in]  User $user User object
\param[out] string &$email email, change this to override local email

\subsection UserGetEmailAuthenticationTimestamp UserGetEmailAuthenticationTimestamp
Called when getting the timestamp of email authentication.
\param[in]  User $user User object
\param[out] int &$timestamp timestamp, change this to override local email
authentication timestamp

\subsection UserGetImplicitGroups UserGetImplicitGroups
Called in User::getImplicitGroups().
\param[out] array &$groups List of implicit (automatically-assigned) groups

\subsection UserGetLanguageObject UserGetLanguageObject
Called when getting user's interface language object.
\param[in]  User $user User object
\param[out] string &$code Language code that will be used to create the object
\param[in]  RequestContext $context RequestContext object

\subsection UserGetReservedNames UserGetReservedNames
Allows to modify $wgReservedUsernames at run time.
\param[out] array &$reservedUsernames $wgReservedUsernames

\subsection UserGetRights UserGetRights
Called in User::getRights().
\param[in]  User $user User to get rights for
\param[out] &$rights: Current rights

\subsection UserIsBlockedFrom UserIsBlockedFrom
Check if a user is blocked from a specific page (for specific block
exemptions).
\param[in]  User $user User in question
\param[in]  Title $title Title of the page in question
\param[out] bool &$blocked whether or not the user is blocked from that page.
\param[out] bool &$allowUsertalk If the user is blocked, whether or not the
block allows users to edit their own user talk pages.

\subsection UserIsBlockedGlobally UserIsBlockedGlobally
Check if user is blocked on all wikis.
\param[out] User &$user User object
\param[in]  string $ip User's IP address
\param[out] bool &$blocked Whether the user is blocked, to be modified by the hook

\subsection UserLoadAfterLoadFromSession UserLoadAfterLoadFromSession
Called to authenticate users on external or environmental means; occurs after
session is loaded.
\param[in]  User $user user object being loaded

\subsection UserLoadDefaults UserLoadDefaults
Called when loading a default user.
\param[in] User $user user object
\param[in] string $name user name

\subsection UserLoadFromDatabase UserLoadFromDatabase
Called when loading a user from the database.
\param[in]  User $user user object
\param[out] &$s database query object

\subsection UserLoadFromSession UserLoadFromSession
Called to authenticate users on external/environmental means; occurs before
session is loaded.
\param[in]  User $user user object being loaded
\param[out] bool &$result set this to a boolean value to abort the normal
authentication process

\subsection UserLoadOptions UserLoadOptions
When user options/preferences are being loaded from the database.
\param[in]  User $user User object
\param[out] &$options Options, can be modified.

\subsection UserLoginComplete UserLoginComplete
After a user has logged in.
\param[in] User $user the user object that was created on login
\param[in] string $inject_html Any HTML to inject after the "logged in"
message.

\subsection UserLoginForm UserLoginForm
Change to manipulate the login form
\param[in] SkinTemplate $template SimpleTemplate instance for the form

\subsection UserLogout UserLogout
Before a user logs out.
\param[in] User $user the user object that is about to be logged out

\subsection UserLogoutComplete UserLogoutComplete
After a user has logged out.
\param[in] User $user the user object _after_ logout (will not have name, ID,
etc.)
\param[in] string $inject_html Any HTML to inject after the "logged out"
message.
\param[in] string $oldName name of the user before logout

\subsection UserRemoveGroup UserRemoveGroup
Called when removing a group; return false to override stock group removal.
\param[in]  User $user the user object that is to have a group removed
\param[out] &$group the group to be removed, can be modified

\subsection UserRights UserRights
After a user's group memberships are changed.
\param[in] User $user User object that was changed
\param[in] array $add Array of strings corresponding to groups added
\param[in] array $remove Array of strings corresponding to groups removed

\subsection UserRetrieveNewTalks UserRetrieveNewTalks
Called when retrieving "You have new messages!" message(s).
\param[in] User $user user retrieving new talks messages
\param[in] array $talks array of new talks page(s)

\subsection UserSaveSettings UserSaveSettings
Called when saving user settings.
\param[in] User $user User object

\subsection UserSaveOptions UserSaveOptions
Called just before saving user preferences/options.
\param[in]  User $user User object
\param[out] &$options Options, modifiable

\subsection UserSetCookies UserSetCookies
Called when setting user cookies.
\param[in]  User $user User object
\param[out] array &$session session array, will be added to $_SESSION
\param[out] array &$cookies cookies array mapping cookie name to its value

\subsection UserSetEmail UserSetEmail
Called when changing user email address.
\param[in]  User $user User object
\param[out] string &$email new email, change this to override new email address

\subsection UserSetEmailAuthenticationTimestamp UserSetEmailAuthenticationTimestamp
Called when setting the timestamp of email authentication.
\param[in]  User $user User object
\param[out] string &$timestamp new timestamp, change this to override local
email authentication timestamp

\subsection UserToolLinksEdit UserToolLinksEdit
Called when generating a list of user tool links, e.g.  "Foobar (Talk |
Contribs | Block)".
\param[in]  int $userId User id of the current user
\param[in]  string $userText User name of the current user
\param[out] array &$items Array of user tool links as HTML fragments

\subsection WantedPages::getQueryInfo WantedPages::getQueryInfo
Called in WantedPagesPage::getQueryInfo(), can be used to alter the SQL query
which gets the list of wanted pages.
\param[out] WantedPagesPage &$wantedPages WantedPagesPage object
\param[out] array &$query query array, see QueryPage::getQueryInfo() for format
documentation

\subsection WatchArticle WatchArticle
Before a watch is added to an article.
\param[in] User $user user that will watch
\param[in] WikiPage $page WikiPage object to be watched

\subsection WatchArticleComplete WatchArticleComplete
After a watch is added to an article.
\param[in] User $user user that watched
\param[in] WikiPage $page WikiPage object watched

\subsection WatchlistEditorBuildRemoveLine WatchlistEditorBuildRemoveLine
when building remove lines in Special:Watchlist/edit.
\param[out] array &$tools array of extra links
\param[in]  Title $title Title object
\param[in]  bool $redirect whether the page is a redirect
\param[in]  Skin $skin Skin object

\subsection WebRequestPathInfoRouter WebRequestPathInfoRouter
While building the PathRouter to parse the REQUEST_URI.
\param[in] PathRouter $router The PathRouter instance

\subsection WikiExporter::dumpStableQuery WikiExporter::dumpStableQuery
Get the SELECT query for "stable" revisions dumps. One, and only one hook
should set this, and return false.
\param[out] array &$tables Database tables to use in the SELECT query
\param[out] array &$opts Options to use for the query
\param[out] array &$join Join conditions

\subsection WikiPageDeletionUpdates WikiPageDeletionUpdates
Manipulate the list of DataUpdates to be applied when a page is deleted. Called
in WikiPage::getDeletionUpdates(). Note that updates specific to a content
model should be provided by the respective Content's getDeletionUpdates()
method.
\param[in]  WikiPage $page the WikiPage
\param[in]  $content the Content to generate updates for
\param[out] array &$updates the array of DataUpdate objects. Hook function may
want to add to it.

\subsection wfShellWikiCmd wfShellWikiCmd
Called when generating a shell-escaped command line string to run a MediaWiki
cli script.
\param[out] string &$script MediaWiki cli script path
\param[out] array &$parameters Array of arguments and options to the script
\param[out] array &$options Associative array of options, may contain the 'php'
and 'wrapper' keys

\subsection wgQueryPages wgQueryPages
Called when initialising $wgQueryPages, use this to add new query pages to be
updated with maintenance/updateSpecialPages.php.
\param[in] $query $wgQueryPages itself

\subsection XmlDumpWriterOpenPage XmlDumpWriterOpenPage
Called at the end of XmlDumpWriter::openPage, to allow extra metadata to be
added.
\param[in]  XmlDumpWriter $obj The XmlDumpWriter object.
\param[out] string &$out The output string.
\param[in]  $row The database row for the page.
\param[in]  Title $title The title of the page.

\subsection XmlDumpWriterWriteRevision XmlDumpWriterWriteRevision
Called at the end of a revision in an XML dump, to add extra metadata.
\param[in]  XmlDumpWriter $obj The XmlDumpWriter object.
\param[out] string &$out The text being output.
\param[in]  $row The database row for the revision.
\param[in]  string $text The revision text.

\subsection XMPGetInfo XMPGetInfo
Called when obtaining the list of XMP tags to extract. Can be used to add
additional tags to extract.
\param[out] array &$items Array containing information on which items to
extract. See XMPInfo for details on the format.

\subsection XMPGetResults XMPGetResults
Called just before returning the results array of parsing xmp data. Can be used
to post-process the results.
\param[out] array &$data Array of metadata sections (such as
$data['xmp-general']) each section is an array of metadata tags returned (each
tag is either a value, or an array of values).

*/
