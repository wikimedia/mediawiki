// Form elements and layouts

// --------------------------------------------------------------------------
// Layouts
// --------------------------------------------------------------------------

// The FancyCaptcha image CAPTCHA used on WMF wikis drives the width of the
// 'VForm' design, the form can't be narrower than this.
$captchaContainerWidth: 290px;
$defaultFormWidth: $captchaContainerWidth;

// Style a compact vertical stacked form ("VForm") and the elements in divs
// within it.
.mw-ui-vform {
    @include box-sizing(border-box);

    width: $defaultFormWidth;

    & > div {
        display: block;
        margin: 0 0 15px 0;
        padding: 0;
        width: 100%;

        // MW currently doesn't use the type attribute everywhere on inputs.
        input,
        .mw-ui-button {
            display: block;
            @include box-sizing(border-box);
            margin: 0;
            width: 100%;
        }

        // We exclude these because they'll generally use mw-ui-button.
        // Otherwise, we'll unintentionally override that.
        input:not([type=button]):not([type=submit]):not([type=file]), {
            @include agora-field-styling; // mixins/_forms.scss
        }

        label {
            display: block;
            @include box-sizing(border-box);
            @include agora-label-styling;
            width: auto;
            margin: 0 0 0.2em 0;
            padding: 0;
        }

        // Override input styling just for checkboxes and radio inputs.
        input[type="checkbox"],
        input[type="radio"] {
            display: inline;
            @include box-sizing(content-box);
            width: auto;
        }

    }
}

// --------------------------------------------------------------------------
// Elements
// --------------------------------------------------------------------------

// Apply mw-ui-input to individual input fields to style them.
// You generally don't need to use this class if <input> is within an Agora
// form container such as mw-ui-vform
.mw-ui-input {
    @include agora-field-styling; // mixins/_forms.scss
}

// Apply mw-ui-label to individual elements to style them.
// You generally don't need to use this class if <label> is within an Agora
// form container such as mw-ui-vform
.mw-ui-label {
    @include agora-label-styling; // mixins/_forms.scss
}

// Nesting an input checkbox or radio button inside a label with this class
// improves alignment, e.g.
//   <label class="mw-ui-checkbox-label">
//       <input type="checkbox">The label text
//   </label>
.mw-ui-checkbox-label, .mw-ui-radio-label {
    @include agora-inline-label-styling;
}

// Below is styling for new-style checkboxes. These only work with JS enabled,
// so we use the .client-js selector to gate.
//
// Try something like...
// <label class="mw-ui-styled-checkbox-label">
//   <input type="checkbox" />&nbsp;
// </label>
//
// Make sure you include the 'mediawiki.ui.js' module in your page or this will
// not work! See the jsduck documentation for jQuery.plugin.styledCheckbox for
// more information and a better, more complete example.
.client-js {
	// We cannot use the existing .mw-ui-checkbox-label because that class
	// is already in use on the new-style login form, and that form would
	// break if we used the same class here.
	.mw-ui-styled-checkbox-label {
		input[type=checkbox] {
			display: none;
		}

		cursor: pointer;
		display: inline-block;
		float: left;
		width: 24px;
		height: 24px;
		border: 1px solid grey;
		@include border-radius(2px);
		margin-right: 3px;
	}

	.mw-ui-styled-checkbox-label.mw-ui-checked {
		background: url( 'img/form-icon/checked.png' ) no-repeat;
	}

	.mw-ui-styled-checkbox-label.mw-ui-disabled {
		background-color: lightgrey;
	}

	// Line the text label up with the center of the new checkbox
	.mw-ui-checkbox-label {
		padding-top: 5px;
	}
}

// If two checkboxes are stacked, they're a little squished, so let's marginalize.
table.mw-htmlform-container {
	border-collapse: separate;
	border-spacing: 0px 4px;
}

.mw-htmlform-field-HTMLFeatureField .mw-input {
	padding-top: 10px;
}

.mw-ui-feature-title .mw-ui-text-check-label {
	font-size: 24px;
}

.mw-ui-feature-title,
.mw-ui-feature-info-links.filled {
	width: 100%;
	border-bottom: 1px solid #e5e5e5;
}

.mw-ui-feature-info-link-contain,
.mw-ui-feature-discussion-link-contain,
.mw-ui-feature-checkbox,
.mw-ui-feature-contain,
.mw-ui-feature-main,
.mw-ui-feature-meta {
	display: inline-block;
}

.mw-ui-feature-field,
.mw-ui-feature-meta {
	position: relative;
}

.mw-ui-feature-checkbox {
	position: absolute;
	top: 5px;
}

.mw-ui-feature-contain {
	margin-left: 42px;
	width: 80%;
}

.mw-ui-feature-description {
	padding-right: 10px;
}

.mw-ui-feature-main,
.mw-ui-feature-meta {
	width: 50%;
	vertical-align: top;
}

.mw-ui-feature-info-link-contain,
.mw-ui-feature-discussion-link-contain {
	border-left: 1px solid #e5e5e5;
	padding: 5px 18px 4px 18px;
}

.mw-ui-feature-discussion-link,
.mw-ui-feature-discussion-link:visited,
.mw-ui-feature-discussion-link:hover,
.mw-ui-feature-discussion-link:active,
.mw-ui-feature-discussion-link:focus {
	color: #888888;
	text-decoration: none;
}

.mw-ui-feature-info-link {
	padding: 2px 8px;
	background: url( 'img/form-icon/feature-information.png' ) no-repeat;
}

.mw-ui-feature-discussion-link-icon {
	padding: 2px 12px 2px 13px;
	background: url( 'img/form-icon/feature-discussion.svg' ) no-repeat;
}

.mw-ui-feature-discussion-link-text {
	padding: 2px 8px;
}

.mw-ui-feature-screenshot-contain {
	margin: 10px 0px 0px 0px;
	width: 100%;
}

.mw-ui-feature-screenshot {
	border: 1px solid #e5e5e5;
	max-height: 150px;
	max-width: 100%;
}

.mw-ui-feature-user-count {
	color: #00b08a;
}
