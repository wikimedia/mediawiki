/*!
 * mw.GallerySlider: Interface controls for the slider gallery
 */
( function ( mw, $, OO ) {
	/**
	 * mw.GallerySlider encapsulates the user interface of the slider
	 * galleries. An object is instantiated for each `.mw-gallery-slider`
	 * element.
	 *
	 * @class mw.GallerySlider
	 * @uses mw.Title
	 * @uses mw.Api
	 * @param {jQuery} gallery The `<ul>` element of the gallery.
	 */
	mw.GallerySlider = function ( gallery ) {
		this.$gallery = $( gallery );
		this.$currentImage = null;
		this.imageInfoCache = {};

		this.drawCarousel();
		this.setSizeRequirement();
		this.toggleThumbnails( false );
		this.showCurrentImage();

		$( window ).on(
			'resize',
			OO.ui.debounce(
				this.setSizeRequirement.bind( this ),
				100
			)
		);

		// Disable thumbnails' link, instead show the image in the carousel
		this.$gallery.find( '.gallerybox' ).on( 'click', function ( e ) {
			this.$currentImage = $( e.currentTarget );
			this.showCurrentImage();
			return false;
		}.bind( this ) );
	};

	/* Properties */
	/**
	 * @property {jQuery} $gallery The `<ul>` element of the gallery.
	 */

	/**
	 * @property {jQuery} $img The `<img>` element of the image currently on display.
	 */

	/**
	 * @property {jQuery} $currentImage The `<li>` element of the current image.
	 */

	/**
	 * @property {Object} imageInfoCache A key value pair of thumbnail URLs and image info.
	 */

	/**
	 * @property {number} imageWidth Width of the image based on viewport size
	 */

	/**
	 * @property {number} imageHeight Height of the image based on viewport size
	 * 	the URLs in the required size.
	 */

	/* Setup */
	OO.initClass( mw.GallerySlider );

	/* Methods */
	/**
	 * Draws the carousel and the interface around it.
	 */
	mw.GallerySlider.prototype.drawCarousel = function () {
		var $carousel, $imgContainer, next, prev, toggle, interfaceElements, carouselStack;

		$carousel = $( '<li>' )
			.addClass( 'gallerycarousel' );

		prev = new OO.ui.ButtonWidget( {
			framed: false,
			icon: 'previous'
		} ).on( 'click', this.prevImage.bind( this ) );

		next = new OO.ui.ButtonWidget( {
			framed: false,
			icon: 'next'
		} ).on( 'click', this.nextImage.bind( this ) );

		toggle = new OO.ui.ButtonWidget( {
			framed: false,
			icon: 'imageGallery'
		} ).on( 'click', this.toggleThumbnails.bind( this ) );

		interfaceElements = new OO.ui.PanelLayout( {
			expanded: false,
			$content: $( '<div>' ).append(
				prev.$element,
				toggle.$element,
				next.$element
			)
		} );

		this.$img = $( '<img>' );
		this.$imgLink = $( '<a>' ).append( this.$img );
		$imgContainer = $( '<div>' )
			.attr( 'class', 'mw-gallery-slider-img-container' )
			.append( this.$imgLink );
		this.$text = $( '<p>' ).attr( 'class', 'mw-gallery-slider-caption' );

		carouselStack = new OO.ui.StackLayout( {
			continuous: true,
			expanded: false,
			items: [
				new OO.ui.PanelLayout( {
					expanded: false,
					$content: $imgContainer
				} ),
				new OO.ui.PanelLayout( {
					expanded: false,
					$content: this.$text
				} ),
				interfaceElements
			]
		} );
		$carousel.append( carouselStack.$element );

		if ( this.$gallery.find( '.gallerycaption' ).length !== 0 ) {
			this.$gallery.find( '.gallerycaption' ).after( $carousel );
		} else {
			this.$gallery.prepend( $carousel );
		}
	};

	/**
	 * Sets the {@link #imageWidth} and {@link #imageHeight} properties
	 * based on the size of the window. Also flushes the
	 * {@link #imageInfoCache} as we'll now need URLs for a different
	 * size.
	 */
	mw.GallerySlider.prototype.setSizeRequirement = function () {
		this.imageWidth = $( '#content' ).width() / 2;
		this.imageHeight = $( window ).height() / 2;
		this.imageInfoCache = {};
		this.$imgLink.css( 'height', this.imageHeight );
		this.setImageSize();
	};

	/**
	 * Sets the height and width of {@link #$img} based on the
	 * proportion of the image and the values generated by
	 * {@link #setSizeRequirement}.
	 */
	mw.GallerySlider.prototype.setImageSize = function () {
		if ( this.$img === undefined || this.$thumbnail === undefined ) {
			return false;
		}

		// Reset height and width
		this.$img
			.removeAttr( 'width' )
			.removeAttr( 'height' );

		// Stretch image to take up the required size
		if ( this.$thumbnail.width() > this.$thumbnail.height() ) {
			this.$img.attr( 'width', this.imageWidth + 'px' );
		} else {
			this.$img.attr( 'height', this.imageHeight + 'px' );
		}
		this.centerImageVertically();

		return true;
	};

	/**
	 * Centers the image vertically by adding top margin.
	 */
	mw.GallerySlider.prototype.centerImageVertically = function () {
		var height = this.$img.height(),
			marginTop = ( this.imageHeight - height ) / 2;
		console.log( height, marginTop );
		this.$img.css( 'margin-top', marginTop );

	};

	/**
	 * Displays the image set as {@link #$currentImage} in the carousel.
	 */
	mw.GallerySlider.prototype.showCurrentImage = function () {
		var imageLi = this.getCurrentImage(),
			caption = imageLi.find( '.gallerytext' );

		// Highlight current thumbnail
		this.$gallery.find( '.gallerybox.slider-current' ).removeClass( 'slider-current' );
		imageLi.addClass( 'slider-current' );

		// Show thumbnail stretched to the right size while the image loads
		this.$thumbnail = imageLi.find( 'img' );
		this.$img.attr( 'src', this.$thumbnail.attr( 'src' ) );
		this.$imgLink.attr( 'href', imageLi.find( 'a' ).eq( 0 ).attr( 'href' ) );
		this.setImageSize();

		// Copy caption
		this.$text
			.empty()
			.append( caption.clone() );

		// Load image at the required size
		this.loadImage( this.$thumbnail ).done( function ( info ) {
			this.$img.attr( 'src', info.thumburl );

			// Make the image smaller in case the current image
			// size is larger than the original file size.
			if (
				info.thumbwidth < this.$img.width() ||
				info.thumbheight < this.$img.height()
			) {
				this.$img.attr( 'width', info.thumbwidth + 'px' );
				this.$img.attr( 'height', info.thumbheight + 'px' );
			}
			this.centerImageVertically();
		}.bind( this ) );
	};

	/**
	 * Loads the full image given the `<img>` element of the thumbnail.
	 *
	 * @param {Object} $img
	 * @return {jQuery.Promise} Resolves with the images URL once the image has loaded.
	 */
	mw.GallerySlider.prototype.loadImage = function ( $img ) {
		var img, d = $.Deferred();

		this.getImageInfo( $img ).done( function ( info ) {
			img = new Image();
			img.src = info.thumburl;
			img.onload = function () {
				d.resolve( info );
			};
			img.onerror = function () {
				d.reject();
			};
		} ).fail( function () {
			d.reject();
		} );

		return d.promise();
	};

	/**
	 * Gets the image's info given an `<img>` element.
	 *
	 * @param {Object} $img
	 * @return {jQuery.Promise} Resolves with the image's info.
	 */
	mw.GallerySlider.prototype.getImageInfo = function ( $img ) {
		var api, title,
			imageSrc = $img.attr( 'src' );

		if ( this.imageInfoCache[ imageSrc ] === undefined ) {
			api = new mw.Api();
			title = new mw.Title.newFromImg( $img ); // TODO: This supports only gallery of images

			this.imageInfoCache[ imageSrc ] = api.get( {
				action: 'query',
				formatversion: 2,
				titles: title.toString(),
				prop: 'imageinfo',
				iiurlwidth: this.imageWidth,
				iiurlheight: this.imageHeight,
				iiprop: 'url'
			} ).then( function ( data ) {
				if ( OO.getProp( data, 'query', 'pages', 0, 'imageinfo', 0, 'thumburl' ) !== undefined ) {
					return data.query.pages[ 0 ].imageinfo[ 0 ];
				} else {
					return $.Deferred.reject();
				}
			} );
		}

		return this.imageInfoCache[ imageSrc ];
	};

	/**
	 * Toggles visibility of the thumbnails.
	 *
	 * @param {boolean} show Optional argument to control the state
	 */
	mw.GallerySlider.prototype.toggleThumbnails = function ( show ) {
		this.$gallery.find( '.gallerybox' ).toggle( show );
	};

	/**
	 * Getter method for {@link #$currentImage}
	 *
	 * @return {jQuery}
	 */
	mw.GallerySlider.prototype.getCurrentImage = function () {
		this.$currentImage = this.$currentImage || this.$gallery.find( '.gallerybox' ).eq( 0 );
		return this.$currentImage;
	};

	/**
	 * Gets the image after the current one. Returns the first image if
	 * the current one is the last.
	 *
	 * @return {jQuery}
	 */
	mw.GallerySlider.prototype.getNextImage = function () {
		if ( this.$currentImage.next( '.gallerybox' )[ 0 ] !== undefined ) { // Not the last image in the gallery
			return this.$currentImage.next( '.gallerybox' );
		} else {
			return this.$gallery.find( '.gallerybox' ).eq( 0 );
		}
	};

	/**
	 * Gets the image before the current one. Returns the last image if
	 * the current one is the first.
	 *
	 * @return {jQuery}
	 */
	mw.GallerySlider.prototype.getPrevImage = function () {
		if ( this.$currentImage.prev( '.gallerybox' )[ 0 ] !== undefined ) { // Not the first image in the gallery
			return this.$currentImage.prev( '.gallerybox' );
		} else {
			return this.$gallery.find( '.gallerybox' ).last();
		}
	};

	/**
	 * Sets the {@link #$currentImage} to the next one and shows
	 * it in the carousel
	 */
	mw.GallerySlider.prototype.nextImage = function () {
		this.$currentImage = this.getNextImage();
		this.showCurrentImage();
	};

	/**
	 * Sets the {@link #$currentImage} to the previous one and shows
	 * it in the carousel
	 */
	mw.GallerySlider.prototype.prevImage = function () {
		this.$currentImage = this.getPrevImage();
		this.showCurrentImage();
	};

	// Bootstrap all slider galleries
	$( function () {
		$( '.mw-gallery-slider' ).each( function () {
			/*jshint -W031 */
			new mw.GallerySlider( this );
			/*jshint +W031 */
		} );
	} );
}( mediaWiki, jQuery, OO ) );
