<?php
/**
 * Object representing the outcome of an edit
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @file
 */

/**
 * @since 1.29
 */
class EditResult {

	/** @var Revision */
	protected $revision;

	/** @var string */
	protected $summary;

	/** @var array */
	protected $meta;

	/** @var bool */
	protected $isNew;

	/** @var Revision|null */
	private $restoredRevision = null;

	/**
	 * @param Revision $revision Revision inserted by the revert
	 * @param string $summary Edit summary actually used
	 * @param array $meta Metadata on the edit
	 * @param bool $isNew Whether the edit created a new page
	 */
	public function __construct( Revision $revision, $summary, array $meta, $isNew ) {
		$this->revision = $revision;
		$this->summary = $summary;
		$this->meta = $meta;
		$this->isNew = $isNew;
	}

	/**
	 * Whether the edit created a new page
	 *
	 * @return bool
	 */
	public function isNew() {
		return $this->isNew;
	}

	/**
	 * Id of reverted revision (0 if it was not a revert)
	 *
	 * @return int
	 */
	public function getRevertedId() {
		return $this->meta['revertedRevId'];
	}

	/**
	 * Id of restored revision (0 if it was not a revert)
	 *
	 * @return int
	 */
	public function getRestoredId() {
		return $this->meta['restoredRevId'];
	}

	/**
	 *  Whether the edit was a revert, not necessarily exact
	 *
	 * @return bool
	 */
	public function isRevert() {
		return !$this->isNew() && $this->getRevertedId() && $this->getRestoredId();
	}

	/**
	 * Whether the edit was an exact revert,
	 * i.e. the contents of the revert revision and restored revision match
	 *
	 * @return bool
	 */
	public function isExactRevert() {
		if ( !$this->isRevert() ) {
			return false;
		}
		// a revert that has a base revision is necessarily exact (it's a rollback)
		if ( $this->meta['baseRevid'] ) {
			return true;
		}
		$restoredRev = $this->getRestoredRevision();
		return $restoredRev && $this->revision->getContent()->equals( $restoredRev->getContent() );
	}

	/**
	 * Fetches the restored revision
	 *
	 * @return Revision|null
	 */
	protected function getRestoredRevision() {
		if ( $this->restoredRevision === null ) {
			$restoredRev = Revision::newFromId( $this->getRestoredId() );
			if ( !$restoredRev ) {
				// this may happen with quick undos in case of replication lag, try master...
				$restoredRev = Revision::newFromId( $this->getRestoredId(),
					Revision::READ_LATEST );
			}
			$this->restoredRevision = $restoredRev;
		}
		return $this->restoredRevision;
	}

	/**
	 * An edit is null when it has a base revision and it is its parent revision
	 *
	 * @return bool
	 */
	public function isNull() {
		return !$this->isNew && $this->meta['baseRevid'] && $this->revision->getParentId() &&
			$this->meta['baseRevid'] === $this->revision->getParentId();
	}

	/**
	 * Whether an autogenerated edit summary was used
	 *
	 * @return bool
	 */
	public function usedAutoSummary() {
		return $this->meta['autoSummHash'] &&
			md5( $this->summary ) === $this->meta['autoSummHash'];
	}

}
