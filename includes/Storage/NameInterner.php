<?php

namespace MediaWiki\Storage;

use InvalidArgumentException;

/**
 * Service interface for managing the "interning" of names. Interning refers to an optimization
 * strategy that allows frequently used names to be only stored once, and using a compact
 * numeric ID to refer to that name.
 *
 * The idea is that extensions can register unique names, which will be mapped to
 * integers for efficient storage and indexing in the database.
 *
 * @license GPL 2+
 * @author Daniel Kinzler
 */
interface NameInterner {

	/**
	 * @param int $internalId
	 *
	 * @throws InvalidArgumentException if $internalId is not an integer
	 * @throws UnknownNameException if $internalId is not a known name ID
	 * @return string
	 */
	public function getName( $internalId );

	/**
	 * Returns an internal ID for the given name, if such a mapping is known.
	 *
	 * @note If the calling code intends to write to internal ID to storage, it should
	 * use acquireInternalId() instead.
	 *
	 * @see acquireInternalId
	 *
	 * @param string $name
	 *
	 * @throws InvalidArgumentException if $name is not a string or not a valid name
	 * @throws UnknownNameException if $name has not been assigned an ID
	 * @return int
	 */
	public function getInternalId( $name );

	/**
	 * Returns an internal ID for the given name, creating a permanent mapping if none existed.
	 *
	 * @see getInternalId
	 *
	 * @note This should be used when the calling code intends to write to internal ID to storage.
	 * Otherwise, getInternalId() should be used instead.
	 *
	 * @note Implementations must make a best effort to create a persistent mapping if none
	 * exists. Only if creating such a mapping fails should this method throw
	 * a NameMappingFailedException.
	 *
	 * @note The mappings generated by implementations of this method must be permanent, and should
	 * be backed up along with other storage data. Persisted data may rely on the numeric IDs
	 * returned by this mapping, and such data may become inaccessible or impossible to interpret
	 * ifthe mapping is lost.
	 *
	 * @param string $name
	 *
	 * @throws InvalidArgumentException if $name is not a string or not a valid name
	 * @throws NameMappingFailedException if no mapping for $name could be created.
	 * @return int
	 */
	public function acquireInternalId( $name );

	/**
	 * Lists all known internal IDs by name.
	 *
	 * @return array An associative array mapping names to internal IDs
	 */
	public function listInternalIds();

}
